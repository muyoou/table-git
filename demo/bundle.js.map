{
  "version": 3,
  "sources": ["../src/types/index.ts", "crypto-shim.js", "../src/utils/hash.ts", "../src/core/cell.ts", "../src/core/structure.ts", "../src/core/sheet.ts", "../src/core/commit.ts", "../src/core/table-git.ts", "../src/core/diff-merge.ts", "../src/core/conflict-resolver.ts", "../src/utils/factory.ts", "../src/formatters/adapter.ts", "../src/formatters/function-formatter.ts", "../src/formatters/builtin.ts", "../src/index.ts", "app.ts"],
  "sourcesContent": ["/**\r\n * \u57FA\u7840\u5BF9\u8C61\u7C7B\u578B\u679A\u4E3E\r\n */\r\nexport enum ObjectType {\r\n  CELL = 'cell',\r\n  COLUMN = 'column',\r\n  ROW = 'row',\r\n  SHEET = 'sheet',\r\n  TABLE = 'table',\r\n  COMMIT = 'commit'\r\n}\r\n\r\n/**\r\n * \u5355\u5143\u683C\u6570\u636E\u7C7B\u578B\r\n */\r\nexport type CellValue = string | number | boolean | Date | null;\r\n\r\n/**\r\n * \u5355\u5143\u683C\u683C\u5F0F\u4FE1\u606F\u63A5\u53E3\r\n */\r\nexport interface CellFormat {\r\n  fontFamily?: string;\r\n  fontSize?: number;\r\n  fontWeight?: 'normal' | 'bold';\r\n  fontStyle?: 'normal' | 'italic';\r\n  textColor?: string;\r\n  backgroundColor?: string;\r\n  borderStyle?: string;\r\n  alignment?: 'left' | 'center' | 'right';\r\n  numberFormat?: string;\r\n}\r\n\r\n/**\r\n * \u5217\u5143\u6570\u636E\u63A5\u53E3\r\n */\r\nexport interface ColumnMetadata {\r\n  id: string;\r\n  description?: string;\r\n  dataType?: 'string' | 'number' | 'date' | 'boolean' | 'mixed';\r\n  width?: number;\r\n  hidden?: boolean;\r\n  order: number;  // \u5217\u987A\u5E8F\r\n  constraints?: {\r\n    required?: boolean;\r\n    unique?: boolean;\r\n    pattern?: string;\r\n    min?: number;\r\n    max?: number;\r\n  };\r\n}\r\n\r\n/**\r\n * \u884C\u5143\u6570\u636E\u63A5\u53E3\r\n */\r\nexport interface RowMetadata {\r\n  id: string;\r\n  height?: number;\r\n  hidden?: boolean;\r\n  order: number;  // \u884C\u987A\u5E8F\uFF08\u7528\u4E8E\u6392\u5E8F\u540E\u7684\u4F4D\u7F6E\uFF09\r\n}\r\n\r\n/**\r\n * \u53D8\u66F4\u7C7B\u578B\u679A\u4E3E\r\n */\r\nexport enum ChangeType {\r\n  CELL_ADD = 'cell_add',\r\n  CELL_UPDATE = 'cell_update',\r\n  CELL_DELETE = 'cell_delete',\r\n  COLUMN_ADD = 'column_add',\r\n  COLUMN_UPDATE = 'column_update',\r\n  COLUMN_DELETE = 'column_delete',\r\n  COLUMN_MOVE = 'column_move',\r\n  ROW_ADD = 'row_add',\r\n  ROW_UPDATE = 'row_update',\r\n  ROW_DELETE = 'row_delete',\r\n  ROW_SORT = 'row_sort'\r\n}\r\n\r\n/**\r\n * \u53D8\u66F4\u8BB0\u5F55\u63A5\u53E3\r\n */\r\nexport interface Change {\r\n  type: ChangeType;\r\n  sheetName: string;\r\n  details: any;\r\n  timestamp: number;\r\n}\r\n\r\n/**\r\n * \u5DEE\u5F02\u7ED3\u679C\u63A5\u53E3\r\n */\r\nexport interface DiffResult {\r\n  cellChanges: {\r\n    added: any[];\r\n    modified: { old: any; new: any }[];\r\n    deleted: any[];\r\n  };\r\n  structureChanges: {\r\n    columns: {\r\n      added: ColumnMetadata[];\r\n      modified: { old: ColumnMetadata; new: ColumnMetadata }[];\r\n      deleted: ColumnMetadata[];\r\n      moved: { column: ColumnMetadata; oldIndex: number; newIndex: number }[];\r\n    };\r\n    rows: {\r\n      added: RowMetadata[];\r\n      modified: { old: RowMetadata; new: RowMetadata }[];\r\n      deleted: RowMetadata[];\r\n      sorted: { oldOrder: string[]; newOrder: string[] };\r\n    };\r\n  };\r\n}\r\n\r\n/**\r\n * \u51B2\u7A81\u7C7B\u578B\u63A5\u53E3\r\n */\r\nexport interface CellConflict {\r\n  position: string;\r\n  base?: any;\r\n  current?: any;\r\n  target?: any;\r\n}\r\n\r\nexport interface StructureConflict {\r\n  type: 'column' | 'row';\r\n  id: string;\r\n  base?: ColumnMetadata;\r\n  current?: ColumnMetadata;\r\n  target?: ColumnMetadata;\r\n}\r\n\r\n/**\r\n * \u6392\u5E8F\u6761\u4EF6\u63A5\u53E3\r\n */\r\nexport interface SortCriteria {\r\n  columnId: string;\r\n  ascending: boolean;\r\n}\r\n", "// Minimal SHA-1 implementation for demo bundling (non-constant-time; demo only)\r\nfunction sha1Hex(message) {\r\n  function rotl(n, s) { return (n << s) | (n >>> (32 - s)); }\r\n  function toHex(n) { return ('00000000' + (n >>> 0).toString(16)).slice(-8); }\r\n  const msg = new TextEncoder().encode(String(message));\r\n  const ml = msg.length * 8;\r\n  const withOne = new Uint8Array(((msg.length + 9 + 63) >> 6) << 6);\r\n  withOne.set(msg);\r\n  withOne[msg.length] = 0x80;\r\n  const dv = new DataView(withOne.buffer);\r\n  dv.setUint32(withOne.length - 4, ml >>> 0);\r\n\r\n  let h0 = 0x67452301, h1 = 0xEFCDAB89, h2 = 0x98BADCFE, h3 = 0x10325476, h4 = 0xC3D2E1F0;\r\n  const w = new Uint32Array(80);\r\n  for (let i = 0; i < withOne.length; i += 64) {\r\n    for (let j = 0; j < 16; j++) w[j] = dv.getUint32(i + j * 4);\r\n    for (let j = 16; j < 80; j++) w[j] = rotl(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\r\n    let a = h0, b = h1, c = h2, d = h3, e = h4;\r\n    for (let j = 0; j < 80; j++) {\r\n      const f = j < 20 ? ((b & c) | (~b & d))\r\n        : j < 40 ? (b ^ c ^ d)\r\n        : j < 60 ? ((b & c) | (b & d) | (c & d))\r\n        : (b ^ c ^ d);\r\n      const k = j < 20 ? 0x5A827999 : j < 40 ? 0x6ED9EBA1 : j < 60 ? 0x8F1BBCDC : 0xCA62C1D6;\r\n      const temp = (rotl(a, 5) + f + e + k + w[j]) >>> 0;\r\n      e = d; d = c; c = rotl(b, 30) >>> 0; b = a; a = temp;\r\n    }\r\n    h0 = (h0 + a) >>> 0; h1 = (h1 + b) >>> 0; h2 = (h2 + c) >>> 0; h3 = (h3 + d) >>> 0; h4 = (h4 + e) >>> 0;\r\n  }\r\n  return toHex(h0) + toHex(h1) + toHex(h2) + toHex(h3) + toHex(h4);\r\n}\r\n\r\nexports.createHash = function createHash(algo) {\r\n  if (algo !== 'sha1') throw new Error('Only sha1 supported in demo shim');\r\n  let acc = '';\r\n  return {\r\n    update(chunk) { acc += (typeof chunk === 'string') ? chunk : new TextDecoder().decode(chunk); return this; },\r\n    digest(enc) { const hex = sha1Hex(acc); return enc === 'hex' ? hex : Buffer.from(hex, 'hex'); }\r\n  };\r\n};\r\n", "import sha1 from 'js-sha1';\r\n\r\n/**\r\n * \u8BA1\u7B97\u5BF9\u8C61\u7684SHA1\u54C8\u5E0C\u503C\r\n * @param obj \u8981\u8BA1\u7B97\u54C8\u5E0C\u7684\u5BF9\u8C61\r\n * @returns SHA1\u54C8\u5E0C\u5B57\u7B26\u4E32\r\n */\r\nexport function calculateHash(obj: any): string {\r\n  const content = JSON.stringify(obj, Object.keys(obj).sort());\r\n  return sha1(content);\r\n}\r\n\r\n/**\r\n * \u751F\u6210\u552F\u4E00ID\r\n * @param prefix \u524D\u7F00\r\n * @returns \u552F\u4E00ID\u5B57\u7B26\u4E32\r\n */\r\nexport function generateId(prefix: string = ''): string {\r\n  const timestamp = Date.now().toString(36);\r\n  const random = Math.random().toString(36).substr(2, 5);\r\n  return `${prefix}${timestamp}_${random}`;\r\n}\r\n\r\n/**\r\n * \u6DF1\u5EA6\u514B\u9686\u5BF9\u8C61\r\n * @param obj \u8981\u514B\u9686\u7684\u5BF9\u8C61\r\n * @returns \u514B\u9686\u540E\u7684\u5BF9\u8C61\r\n */\r\nexport function deepClone<T>(obj: T): T {\r\n  return JSON.parse(JSON.stringify(obj));\r\n}\r\n\r\n/**\r\n * \u6BD4\u8F83\u4E24\u4E2A\u5BF9\u8C61\u662F\u5426\u76F8\u7B49\r\n * @param obj1 \u5BF9\u8C611\r\n * @param obj2 \u5BF9\u8C612\r\n * @returns \u662F\u5426\u76F8\u7B49\r\n */\r\nexport function deepEqual(obj1: any, obj2: any): boolean {\r\n  return JSON.stringify(obj1, Object.keys(obj1).sort()) === \r\n         JSON.stringify(obj2, Object.keys(obj2).sort());\r\n}\r\n\r\n/**\r\n * \u89E3\u6790\u5355\u5143\u683C\u4F4D\u7F6E\u5B57\u7B26\u4E32\r\n * @param position \u4F4D\u7F6E\u5B57\u7B26\u4E32 \"row,col\"\r\n * @returns \u884C\u5217\u6570\u5B57\r\n */\r\nexport function parsePosition(position: string): { row: number; col: number } {\r\n  const [row, col] = position.split(',').map(Number);\r\n  return { row, col };\r\n}\r\n\r\n/**\r\n * \u683C\u5F0F\u5316\u5355\u5143\u683C\u4F4D\u7F6E\r\n * @param row \u884C\u53F7\r\n * @param col \u5217\u53F7\r\n * @returns \u4F4D\u7F6E\u5B57\u7B26\u4E32\r\n */\r\nexport function formatPosition(row: number, col: number): string {\r\n  return `${row},${col}`;\r\n}\r\n", "import { ObjectType, CellValue, CellFormat } from '../types';\r\nimport { calculateHash } from '../utils/hash';\r\n\r\n/**\r\n * \u5355\u5143\u683C\u5BF9\u8C61 - \u6700\u5C0F\u5B58\u50A8\u7C92\u5EA6\r\n */\r\nexport class CellObject {\r\n  public readonly type = ObjectType.CELL;\r\n  public row: number;\r\n  public column: number;\r\n  public value: CellValue;\r\n  public formula?: string;\r\n  public format?: CellFormat;\r\n  public hash: string;\r\n\r\n  constructor(row: number, column: number, value: CellValue, formula?: string, format?: CellFormat) {\r\n    this.row = row;\r\n    this.column = column;\r\n    this.value = value;\r\n    this.formula = formula;\r\n    this.format = format;\r\n    this.hash = this.calculateHash();\r\n  }\r\n\r\n  private calculateHash(): string {\r\n    return calculateHash({\r\n      type: this.type,\r\n      row: this.row,\r\n      column: this.column,\r\n      value: this.value,\r\n      formula: this.formula,\r\n      format: this.format\r\n    });\r\n  }\r\n\r\n  /**\r\n   * \u66F4\u65B0\u5355\u5143\u683C\u503C\r\n   */\r\n  updateValue(value: CellValue, formula?: string, format?: CellFormat): CellObject {\r\n    return new CellObject(this.row, this.column, value, formula, format);\r\n  }\r\n\r\n  /**\r\n   * \u68C0\u67E5\u662F\u5426\u4E3A\u7A7A\u5355\u5143\u683C\r\n   */\r\n  isEmpty(): boolean {\r\n    return this.value === null || this.value === undefined || this.value === '';\r\n  }\r\n\r\n  /**\r\n   * \u8F6C\u6362\u4E3AJSON\r\n   */\r\n  toJSON(): any {\r\n    return {\r\n      type: this.type,\r\n      row: this.row,\r\n      column: this.column,\r\n      value: this.value,\r\n      formula: this.formula,\r\n      format: this.format,\r\n      hash: this.hash\r\n    };\r\n  }\r\n\r\n  /**\r\n   * \u4ECEJSON\u521B\u5EFA\u5BF9\u8C61\r\n   */\r\n  static fromJSON(json: any): CellObject {\r\n    return new CellObject(\r\n      json.row,\r\n      json.column,\r\n      json.value,\r\n      json.formula,\r\n      json.format\r\n    );\r\n  }\r\n}\r\n", "import { ColumnMetadata, RowMetadata } from '../types';\r\nimport { calculateHash, deepClone } from '../utils/hash';\r\n\r\n/**\r\n * \u8868\u683C\u7ED3\u6784\u7C7B - \u7BA1\u7406\u5217\u548C\u884C\u7684\u5143\u6570\u636E\r\n */\r\nexport class TableStructure {\r\n  public columns: Map<string, ColumnMetadata>;\r\n  public rows: Map<string, RowMetadata>;\r\n  public columnOrder: string[];  // \u5217ID\u7684\u987A\u5E8F\u6570\u7EC4\r\n  public rowOrder: string[];      // \u884CID\u7684\u987A\u5E8F\u6570\u7EC4\r\n  public hash: string;\r\n\r\n  constructor() {\r\n    this.columns = new Map();\r\n    this.rows = new Map();\r\n    this.columnOrder = [];\r\n    this.rowOrder = [];\r\n    this.hash = this.calculateHash();\r\n  }\r\n\r\n  /**\r\n   * \u6DFB\u52A0\u5217\r\n   */\r\n  addColumn(column: ColumnMetadata): void {\r\n    this.columns.set(column.id, deepClone(column));\r\n    \r\n    // \u6309order\u63D2\u5165\u5230\u6B63\u786E\u4F4D\u7F6E\r\n    const insertIndex = this.columnOrder.findIndex(id => {\r\n      const existingColumn = this.columns.get(id);\r\n      return existingColumn && existingColumn.order > column.order;\r\n    });\r\n    \r\n    if (insertIndex === -1) {\r\n      this.columnOrder.push(column.id);\r\n    } else {\r\n      this.columnOrder.splice(insertIndex, 0, column.id);\r\n    }\r\n    \r\n    this.updateHash();\r\n  }\r\n\r\n  /**\r\n   * \u5220\u9664\u5217\r\n   */\r\n  removeColumn(columnId: string): boolean {\r\n    if (this.columns.delete(columnId)) {\r\n      this.columnOrder = this.columnOrder.filter(id => id !== columnId);\r\n      this.updateHash();\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * \u66F4\u65B0\u5217\u4FE1\u606F\r\n   */\r\n  updateColumn(columnId: string, updates: Partial<ColumnMetadata>): boolean {\r\n    const column = this.columns.get(columnId);\r\n    if (column) {\r\n      const updatedColumn = { ...column, ...updates };\r\n      this.columns.set(columnId, updatedColumn);\r\n      this.updateHash();\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * \u79FB\u52A8\u5217\u4F4D\u7F6E\r\n   */\r\n  moveColumn(columnId: string, newIndex: number): boolean {\r\n    const currentIndex = this.columnOrder.indexOf(columnId);\r\n    if (currentIndex === -1 || newIndex < 0 || newIndex >= this.columnOrder.length) {\r\n      return false;\r\n    }\r\n\r\n    // \u79FB\u9664\u5E76\u63D2\u5165\u5230\u65B0\u4F4D\u7F6E\r\n    this.columnOrder.splice(currentIndex, 1);\r\n    this.columnOrder.splice(newIndex, 0, columnId);\r\n    \r\n    // \u66F4\u65B0\u6240\u6709\u5217\u7684order\u5C5E\u6027\r\n    this.updateColumnOrders();\r\n    this.updateHash();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * \u6DFB\u52A0\u884C\r\n   */\r\n  addRow(row: RowMetadata): void {\r\n    this.rows.set(row.id, deepClone(row));\r\n    \r\n    // \u6309order\u63D2\u5165\u5230\u6B63\u786E\u4F4D\u7F6E\r\n    const insertIndex = this.rowOrder.findIndex(id => {\r\n      const existingRow = this.rows.get(id);\r\n      return existingRow && existingRow.order > row.order;\r\n    });\r\n    \r\n    if (insertIndex === -1) {\r\n      this.rowOrder.push(row.id);\r\n    } else {\r\n      this.rowOrder.splice(insertIndex, 0, row.id);\r\n    }\r\n    \r\n    this.updateHash();\r\n  }\r\n\r\n  /**\r\n   * \u5220\u9664\u884C\r\n   */\r\n  removeRow(rowId: string): boolean {\r\n    if (this.rows.delete(rowId)) {\r\n      this.rowOrder = this.rowOrder.filter(id => id !== rowId);\r\n      this.updateHash();\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * \u6392\u5E8F\u884C\r\n   */\r\n  sortRows(newOrder: string[]): void {\r\n    // \u9A8C\u8BC1\u65B0\u987A\u5E8F\u5305\u542B\u6240\u6709\u73B0\u6709\u884C\r\n    if (newOrder.length === this.rowOrder.length && \r\n        newOrder.every(id => this.rowOrder.includes(id))) {\r\n      this.rowOrder = [...newOrder];\r\n      this.updateRowOrders();\r\n      this.updateHash();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * \u83B7\u53D6\u5217\u4FE1\u606F\r\n   */\r\n  getColumn(columnId: string): ColumnMetadata | undefined {\r\n    return this.columns.get(columnId);\r\n  }\r\n\r\n  /**\r\n   * \u83B7\u53D6\u884C\u4FE1\u606F\r\n   */\r\n  getRow(rowId: string): RowMetadata | undefined {\r\n    return this.rows.get(rowId);\r\n  }\r\n\r\n  /**\r\n   * \u83B7\u53D6\u6240\u6709\u5217ID\uFF08\u6309\u987A\u5E8F\uFF09\r\n   */\r\n  getColumnIds(): string[] {\r\n    return [...this.columnOrder];\r\n  }\r\n\r\n  /**\r\n   * \u83B7\u53D6\u6240\u6709\u884CID\uFF08\u6309\u987A\u5E8F\uFF09\r\n   */\r\n  getRowIds(): string[] {\r\n    return [...this.rowOrder];\r\n  }\r\n\r\n  private updateColumnOrders(): void {\r\n    this.columnOrder.forEach((id, index) => {\r\n      const column = this.columns.get(id);\r\n      if (column) {\r\n        column.order = index;\r\n      }\r\n    });\r\n  }\r\n\r\n  private updateRowOrders(): void {\r\n    this.rowOrder.forEach((id, index) => {\r\n      const row = this.rows.get(id);\r\n      if (row) {\r\n        row.order = index;\r\n      }\r\n    });\r\n  }\r\n\r\n  private updateHash(): void {\r\n    this.hash = this.calculateHash();\r\n  }\r\n\r\n  private calculateHash(): string {\r\n    return calculateHash({\r\n      columns: Array.from(this.columns.entries()),\r\n      rows: Array.from(this.rows.entries()),\r\n      columnOrder: this.columnOrder,\r\n      rowOrder: this.rowOrder\r\n    });\r\n  }\r\n\r\n  /**\r\n   * \u514B\u9686\u7ED3\u6784\r\n   */\r\n  clone(): TableStructure {\r\n    const cloned = new TableStructure();\r\n    cloned.columns = new Map(Array.from(this.columns.entries()).map(([k, v]) => [k, deepClone(v)]));\r\n    cloned.rows = new Map(Array.from(this.rows.entries()).map(([k, v]) => [k, deepClone(v)]));\r\n    cloned.columnOrder = [...this.columnOrder];\r\n    cloned.rowOrder = [...this.rowOrder];\r\n    cloned.updateHash();\r\n    return cloned;\r\n  }\r\n\r\n  /**\r\n   * \u8F6C\u6362\u4E3AJSON\r\n   */\r\n  toJSON(): any {\r\n    return {\r\n      columns: Array.from(this.columns.entries()),\r\n      rows: Array.from(this.rows.entries()),\r\n      columnOrder: this.columnOrder,\r\n      rowOrder: this.rowOrder,\r\n      hash: this.hash\r\n    };\r\n  }\r\n\r\n  /**\r\n   * \u4ECEJSON\u521B\u5EFA\u5BF9\u8C61\r\n   */\r\n  static fromJSON(json: any): TableStructure {\r\n    const structure = new TableStructure();\r\n    structure.columns = new Map(json.columns);\r\n    structure.rows = new Map(json.rows);\r\n    structure.columnOrder = json.columnOrder;\r\n    structure.rowOrder = json.rowOrder;\r\n    structure.updateHash();\r\n    return structure;\r\n  }\r\n}\r\n", "import { ObjectType } from '../types';\r\nimport { TableStructure } from './structure';\r\nimport { calculateHash } from '../utils/hash';\r\nimport { formatPosition, parsePosition } from '../utils/hash';\r\n\r\n/**\r\n * \u5DE5\u4F5C\u8868\u6811\u5BF9\u8C61 - \u7BA1\u7406\u5355\u4E2A\u5DE5\u4F5C\u8868\u7684\u6570\u636E\u548C\u7ED3\u6784\r\n */\r\nexport class SheetTree {\r\n  public readonly type = ObjectType.SHEET;\r\n  public name: string;\r\n  public cells: Map<string, string>;  // \"row,col\" -> cell_hash\r\n  public structure: TableStructure;\r\n  public hash: string;\r\n\r\n  constructor(name: string) {\r\n    this.name = name;\r\n    this.cells = new Map();\r\n    this.structure = new TableStructure();\r\n    this.hash = this.calculateHash();\r\n  }\r\n\r\n  /**\r\n   * \u8BBE\u7F6E\u5355\u5143\u683C\u54C8\u5E0C\r\n   */\r\n  setCellHash(row: number, col: number, hash: string): void {\r\n    const key = formatPosition(row, col);\r\n    this.cells.set(key, hash);\r\n    this.updateHash();\r\n  }\r\n\r\n  /**\r\n   * \u83B7\u53D6\u5355\u5143\u683C\u54C8\u5E0C\r\n   */\r\n  getCellHash(row: number, col: number): string | undefined {\r\n    const key = formatPosition(row, col);\r\n    return this.cells.get(key);\r\n  }\r\n\r\n  /**\r\n   * \u5220\u9664\u5355\u5143\u683C\r\n   */\r\n  deleteCell(row: number, col: number): boolean {\r\n    const key = formatPosition(row, col);\r\n    const deleted = this.cells.delete(key);\r\n    if (deleted) {\r\n      this.updateHash();\r\n    }\r\n    return deleted;\r\n  }\r\n\r\n  /**\r\n   * \u83B7\u53D6\u6240\u6709\u5355\u5143\u683C\u4F4D\u7F6E\r\n   */\r\n  getAllCellPositions(): { row: number; col: number }[] {\r\n    return Array.from(this.cells.keys()).map(key => parsePosition(key));\r\n  }\r\n\r\n  /**\r\n   * \u83B7\u53D6\u6307\u5B9A\u533A\u57DF\u7684\u5355\u5143\u683C\r\n   */\r\n  getCellsInRange(startRow: number, startCol: number, endRow: number, endCol: number): Map<string, string> {\r\n    const result = new Map<string, string>();\r\n    \r\n    for (let row = startRow; row <= endRow; row++) {\r\n      for (let col = startCol; col <= endCol; col++) {\r\n        const hash = this.getCellHash(row, col);\r\n        if (hash) {\r\n          result.set(formatPosition(row, col), hash);\r\n        }\r\n      }\r\n    }\r\n    \r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * \u6E05\u7A7A\u6240\u6709\u5355\u5143\u683C\r\n   */\r\n  clearAllCells(): void {\r\n    this.cells.clear();\r\n    this.updateHash();\r\n  }\r\n\r\n  /**\r\n   * \u83B7\u53D6\u5DE5\u4F5C\u8868\u8FB9\u754C\r\n   */\r\n  getBounds(): { minRow: number; maxRow: number; minCol: number; maxCol: number } | null {\r\n    if (this.cells.size === 0) {\r\n      return null;\r\n    }\r\n\r\n    let minRow = Infinity, maxRow = -Infinity;\r\n    let minCol = Infinity, maxCol = -Infinity;\r\n\r\n    for (const key of this.cells.keys()) {\r\n      const { row, col } = parsePosition(key);\r\n      minRow = Math.min(minRow, row);\r\n      maxRow = Math.max(maxRow, row);\r\n      minCol = Math.min(minCol, col);\r\n      maxCol = Math.max(maxCol, col);\r\n    }\r\n\r\n    return { minRow, maxRow, minCol, maxCol };\r\n  }\r\n\r\n  /**\r\n   * \u63D2\u5165\u884C\uFF08\u5728\u6307\u5B9A\u884C\u4E4B\u524D\u63D2\u5165\uFF09\r\n   */\r\n  insertRowBefore(targetRow: number): void {\r\n    const newCells = new Map<string, string>();\r\n    \r\n    for (const [key, hash] of this.cells) {\r\n      const { row, col } = parsePosition(key);\r\n      const newRow = row >= targetRow ? row + 1 : row;\r\n      newCells.set(formatPosition(newRow, col), hash);\r\n    }\r\n    \r\n    this.cells = newCells;\r\n    this.updateHash();\r\n  }\r\n\r\n  /**\r\n   * \u63D2\u5165\u5217\uFF08\u5728\u6307\u5B9A\u5217\u4E4B\u524D\u63D2\u5165\uFF09\r\n   */\r\n  insertColumnBefore(targetCol: number): void {\r\n    const newCells = new Map<string, string>();\r\n    \r\n    for (const [key, hash] of this.cells) {\r\n      const { row, col } = parsePosition(key);\r\n      const newCol = col >= targetCol ? col + 1 : col;\r\n      newCells.set(formatPosition(row, newCol), hash);\r\n    }\r\n    \r\n    this.cells = newCells;\r\n    this.updateHash();\r\n  }\r\n\r\n  /**\r\n   * \u5220\u9664\u884C\r\n   */\r\n  deleteRow(targetRow: number): void {\r\n    const newCells = new Map<string, string>();\r\n    \r\n    for (const [key, hash] of this.cells) {\r\n      const { row, col } = parsePosition(key);\r\n      if (row === targetRow) {\r\n        continue; // \u8DF3\u8FC7\u8981\u5220\u9664\u7684\u884C\r\n      }\r\n      const newRow = row > targetRow ? row - 1 : row;\r\n      newCells.set(formatPosition(newRow, col), hash);\r\n    }\r\n    \r\n    this.cells = newCells;\r\n    this.updateHash();\r\n  }\r\n\r\n  /**\r\n   * \u5220\u9664\u5217\r\n   */\r\n  deleteColumn(targetCol: number): void {\r\n    const newCells = new Map<string, string>();\r\n    \r\n    for (const [key, hash] of this.cells) {\r\n      const { row, col } = parsePosition(key);\r\n      if (col === targetCol) {\r\n        continue; // \u8DF3\u8FC7\u8981\u5220\u9664\u7684\u5217\r\n      }\r\n      const newCol = col > targetCol ? col - 1 : col;\r\n      newCells.set(formatPosition(row, newCol), hash);\r\n    }\r\n    \r\n    this.cells = newCells;\r\n    this.updateHash();\r\n  }\r\n\r\n  private updateHash(): void {\r\n    this.hash = this.calculateHash();\r\n  }\r\n\r\n  private calculateHash(): string {\r\n    return calculateHash({\r\n      type: this.type,\r\n      name: this.name,\r\n      cells: Array.from(this.cells.entries()),\r\n      structure: this.structure.hash\r\n    });\r\n  }\r\n\r\n  /**\r\n   * \u514B\u9686\u5DE5\u4F5C\u8868\r\n   */\r\n  clone(): SheetTree {\r\n    const cloned = new SheetTree(this.name);\r\n    cloned.cells = new Map(this.cells);\r\n    cloned.structure = this.structure.clone();\r\n    cloned.updateHash();\r\n    return cloned;\r\n  }\r\n\r\n  /**\r\n   * \u8F6C\u6362\u4E3AJSON\r\n   */\r\n  toJSON(): any {\r\n    return {\r\n      type: this.type,\r\n      name: this.name,\r\n      cells: Array.from(this.cells.entries()),\r\n      structure: this.structure.toJSON(),\r\n      hash: this.hash\r\n    };\r\n  }\r\n\r\n  /**\r\n   * \u4ECEJSON\u521B\u5EFA\u5BF9\u8C61\r\n   */\r\n  static fromJSON(json: any): SheetTree {\r\n    const sheet = new SheetTree(json.name);\r\n    sheet.cells = new Map(json.cells);\r\n    sheet.structure = TableStructure.fromJSON(json.structure);\r\n    sheet.updateHash();\r\n    return sheet;\r\n  }\r\n}\r\n", "import { ObjectType } from '../types';\r\nimport { calculateHash } from '../utils/hash';\r\n\r\n/**\r\n * \u63D0\u4EA4\u5BF9\u8C61 - \u8868\u793A\u4E00\u6B21\u63D0\u4EA4\u7684\u5B8C\u6574\u4FE1\u606F\r\n */\r\nexport class CommitObject {\r\n  public readonly type = ObjectType.COMMIT;\r\n  public tree: string;  // \u6307\u5411\u6839\u6811\u5BF9\u8C61\u7684\u54C8\u5E0C\r\n  public parent?: string;  // \u7236\u63D0\u4EA4\u54C8\u5E0C\r\n  public author: string;\r\n  public email: string;\r\n  public message: string;\r\n  public timestamp: number;\r\n  public hash: string;\r\n\r\n  constructor(tree: string, message: string, author: string, email: string, parent?: string) {\r\n    this.tree = tree;\r\n    this.message = message;\r\n    this.author = author;\r\n    this.email = email;\r\n    this.parent = parent;\r\n    this.timestamp = Date.now();\r\n    this.hash = this.calculateHash();\r\n  }\r\n\r\n  private calculateHash(): string {\r\n    return calculateHash({\r\n      type: this.type,\r\n      tree: this.tree,\r\n      parent: this.parent,\r\n      author: this.author,\r\n      email: this.email,\r\n      message: this.message,\r\n      timestamp: this.timestamp\r\n    });\r\n  }\r\n\r\n  /**\r\n   * \u68C0\u67E5\u662F\u5426\u4E3A\u521D\u59CB\u63D0\u4EA4\r\n   */\r\n  isInitialCommit(): boolean {\r\n    return this.parent === undefined || this.parent === '';\r\n  }\r\n\r\n  /**\r\n   * \u83B7\u53D6\u7B80\u77ED\u54C8\u5E0C\r\n   */\r\n  getShortHash(): string {\r\n    return this.hash.substring(0, 7);\r\n  }\r\n\r\n  /**\r\n   * \u683C\u5F0F\u5316\u63D0\u4EA4\u4FE1\u606F\r\n   */\r\n  format(): string {\r\n    const date = new Date(this.timestamp).toLocaleString();\r\n    return `${this.getShortHash()} ${this.message}\\nAuthor: ${this.author} <${this.email}>\\nDate: ${date}`;\r\n  }\r\n\r\n  /**\r\n   * \u8F6C\u6362\u4E3AJSON\r\n   */\r\n  toJSON(): any {\r\n    return {\r\n      type: this.type,\r\n      tree: this.tree,\r\n      parent: this.parent,\r\n      author: this.author,\r\n      email: this.email,\r\n      message: this.message,\r\n      timestamp: this.timestamp,\r\n      hash: this.hash\r\n    };\r\n  }\r\n\r\n  /**\r\n   * \u4ECEJSON\u521B\u5EFA\u5BF9\u8C61\r\n   */\r\n  static fromJSON(json: any): CommitObject {\r\n    const commit = new CommitObject(\r\n      json.tree,\r\n      json.message,\r\n      json.author,\r\n      json.email,\r\n      json.parent\r\n    );\r\n    commit.timestamp = json.timestamp;\r\n    commit.hash = json.hash;\r\n    return commit;\r\n  }\r\n}\r\n", "import { \r\n  ChangeType, \r\n  Change, \r\n  DiffResult, \r\n  ColumnMetadata, \r\n  RowMetadata, \r\n  SortCriteria,\r\n  CellValue,\r\n  CellFormat,\r\n  ObjectType\r\n} from '../types';\r\nimport { CellObject } from './cell';\r\nimport { SheetTree } from './sheet';\r\nimport { CommitObject } from './commit';\r\nimport { TableStructure } from './structure';\r\nimport { deepClone, generateId } from '../utils/hash';\r\n\r\n/**\r\n * \u8868\u683C\u7248\u672C\u63A7\u5236\u5F15\u64CE - Git \u98CE\u683C\u7684\u8868\u683C\u7248\u672C\u63A7\u5236\u7CFB\u7EDF\r\n */\r\nexport class TableGit {\r\n  private objects: Map<string, any>;  // \u5BF9\u8C61\u5B58\u50A8\r\n  private refs: Map<string, string>;  // \u5206\u652F\u5F15\u7528\r\n  private head: string;  // \u5F53\u524D\u5206\u652F\r\n  private index: Map<string, Change>;  // \u6682\u5B58\u533A\r\n  private workingTree: Map<string, SheetTree>;  // \u5DE5\u4F5C\u533A\r\n\r\n  constructor() {\r\n    this.objects = new Map();\r\n    this.refs = new Map();\r\n    this.head = 'main';\r\n    this.index = new Map();\r\n    this.workingTree = new Map();\r\n  }\r\n\r\n  /**\r\n   * \u521D\u59CB\u5316\u4ED3\u5E93\r\n   */\r\n  init(branchName: string = 'main'): void {\r\n    this.head = branchName;\r\n    this.refs.set(branchName, '');\r\n    \r\n    // \u521B\u5EFA\u521D\u59CB\u7A7A\u63D0\u4EA4\r\n    const emptyTree = new SheetTree('default');\r\n    const treeHash = this.storeObject(emptyTree);\r\n    \r\n    const initialCommit = new CommitObject(\r\n      treeHash,\r\n      'Initial commit',\r\n      'System',\r\n      'system@tablegit.com'\r\n    );\r\n    \r\n    const commitHash = this.storeObject(initialCommit);\r\n    this.refs.set(branchName, commitHash);\r\n    \r\n    // \u52A0\u8F7D\u5DE5\u4F5C\u533A\r\n    this.loadWorkingTree();\r\n  }\r\n\r\n  // ========== \u5355\u5143\u683C\u64CD\u4F5C ==========\r\n\r\n  /**\r\n   * \u6DFB\u52A0\u6216\u66F4\u65B0\u5355\u5143\u683C\r\n   */\r\n  addCellChange(\r\n    sheetName: string, \r\n    row: number, \r\n    column: number, \r\n    value: CellValue, \r\n    formula?: string, \r\n    format?: CellFormat\r\n  ): void {\r\n    const cell = new CellObject(row, column, value, formula, format);\r\n    const changeKey = `${sheetName}:cell:${row},${column}`;\r\n    \r\n    this.index.set(changeKey, {\r\n      type: ChangeType.CELL_UPDATE,\r\n      sheetName,\r\n      details: cell,\r\n      timestamp: Date.now()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * \u5220\u9664\u5355\u5143\u683C\r\n   */\r\n  deleteCellChange(sheetName: string, row: number, column: number): void {\r\n    const changeKey = `${sheetName}:cell:${row},${column}`;\r\n    \r\n    this.index.set(changeKey, {\r\n      type: ChangeType.CELL_DELETE,\r\n      sheetName,\r\n      details: { row, column },\r\n      timestamp: Date.now()\r\n    });\r\n  }\r\n\r\n  // ========== \u5217\u64CD\u4F5C ==========\r\n\r\n  /**\r\n   * \u6DFB\u52A0\u5217\r\n   */\r\n  addColumn(sheetName: string, column: ColumnMetadata): void {\r\n    const changeKey = `${sheetName}:column:add:${column.id}`;\r\n    \r\n    this.index.set(changeKey, {\r\n      type: ChangeType.COLUMN_ADD,\r\n      sheetName,\r\n      details: column,\r\n      timestamp: Date.now()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * \u66F4\u65B0\u5217\u4FE1\u606F\r\n   */\r\n  updateColumn(sheetName: string, columnId: string, updates: Partial<ColumnMetadata>): void {\r\n    const changeKey = `${sheetName}:column:update:${columnId}`;\r\n    \r\n    this.index.set(changeKey, {\r\n      type: ChangeType.COLUMN_UPDATE,\r\n      sheetName,\r\n      details: { columnId, updates },\r\n      timestamp: Date.now()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * \u5220\u9664\u5217\r\n   */\r\n  deleteColumn(sheetName: string, columnId: string): void {\r\n    const changeKey = `${sheetName}:column:delete:${columnId}`;\r\n    \r\n    this.index.set(changeKey, {\r\n      type: ChangeType.COLUMN_DELETE,\r\n      sheetName,\r\n      details: { columnId },\r\n      timestamp: Date.now()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * \u79FB\u52A8\u5217\u4F4D\u7F6E\r\n   */\r\n  moveColumn(sheetName: string, columnId: string, newIndex: number): void {\r\n    const changeKey = `${sheetName}:column:move:${columnId}`;\r\n    \r\n    this.index.set(changeKey, {\r\n      type: ChangeType.COLUMN_MOVE,\r\n      sheetName,\r\n      details: { columnId, newIndex },\r\n      timestamp: Date.now()\r\n    });\r\n  }\r\n\r\n  // ========== \u884C\u64CD\u4F5C ==========\r\n\r\n  /**\r\n   * \u6DFB\u52A0\u884C\r\n   */\r\n  addRow(sheetName: string, row: RowMetadata): void {\r\n    const changeKey = `${sheetName}:row:add:${row.id}`;\r\n    \r\n    this.index.set(changeKey, {\r\n      type: ChangeType.ROW_ADD,\r\n      sheetName,\r\n      details: row,\r\n      timestamp: Date.now()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * \u5220\u9664\u884C\r\n   */\r\n  deleteRow(sheetName: string, rowId: string): void {\r\n    const changeKey = `${sheetName}:row:delete:${rowId}`;\r\n    \r\n    this.index.set(changeKey, {\r\n      type: ChangeType.ROW_DELETE,\r\n      sheetName,\r\n      details: { rowId },\r\n      timestamp: Date.now()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * \u6392\u5E8F\u884C\r\n   */\r\n  sortRows(sheetName: string, sortCriteria: SortCriteria[]): void {\r\n    const changeKey = `${sheetName}:row:sort:${Date.now()}`;\r\n    \r\n    this.index.set(changeKey, {\r\n      type: ChangeType.ROW_SORT,\r\n      sheetName,\r\n      details: { sortCriteria },\r\n      timestamp: Date.now()\r\n    });\r\n  }\r\n\r\n  // ========== \u7248\u672C\u63A7\u5236\u6838\u5FC3\u64CD\u4F5C ==========\r\n\r\n  /**\r\n   * \u63D0\u4EA4\u53D8\u66F4\r\n   */\r\n  commit(message: string, author: string, email: string): string {\r\n    if (this.index.size === 0) {\r\n      throw new Error('Nothing to commit');\r\n    }\r\n\r\n    // \u6784\u5EFA\u65B0\u7684\u6811\u5BF9\u8C61\r\n    const newTree = this.buildTreeFromIndex();\r\n    const treeHash = this.storeObject(newTree);\r\n    \r\n    // \u83B7\u53D6\u5F53\u524D\u63D0\u4EA4\r\n    const currentCommitHash = this.refs.get(this.head);\r\n    \r\n    // \u521B\u5EFA\u65B0\u63D0\u4EA4\r\n    const commit = new CommitObject(\r\n      treeHash,\r\n      message,\r\n      author,\r\n      email,\r\n      currentCommitHash\r\n    );\r\n    \r\n    const commitHash = this.storeObject(commit);\r\n    \r\n    // \u66F4\u65B0\u5F15\u7528\r\n    this.refs.set(this.head, commitHash);\r\n    \r\n    // \u6E05\u7A7A\u6682\u5B58\u533A\r\n    this.index.clear();\r\n    \r\n    // \u91CD\u65B0\u52A0\u8F7D\u5DE5\u4F5C\u533A\r\n    this.loadWorkingTree();\r\n    \r\n    return commitHash;\r\n  }\r\n\r\n  /**\r\n   * \u4ECE\u6682\u5B58\u533A\u6784\u5EFA\u6811\u5BF9\u8C61\r\n   */\r\n  private buildTreeFromIndex(): SheetTree {\r\n    // \u4ECE\u5F53\u524D\u5DE5\u4F5C\u533A\u83B7\u53D6\u57FA\u7840\u6811\uFF0C\u5982\u679C\u4E0D\u5B58\u5728\u5219\u521B\u5EFA\u65B0\u7684\r\n    let sheet = this.workingTree.get('default')?.clone() || new SheetTree('default');\r\n    \r\n    // \u5E94\u7528\u6240\u6709\u6682\u5B58\u7684\u53D8\u66F4\r\n    for (const [key, change] of this.index) {\r\n      this.applyChange(sheet, change);\r\n    }\r\n    \r\n    return sheet;\r\n  }\r\n\r\n  /**\r\n   * \u5E94\u7528\u5355\u4E2A\u53D8\u66F4\r\n   */\r\n  private applyChange(sheet: SheetTree, change: Change): void {\r\n    switch (change.type) {\r\n      case ChangeType.CELL_UPDATE:\r\n      case ChangeType.CELL_ADD:\r\n        const cell = change.details as CellObject;\r\n        const cellHash = this.storeObject(cell);\r\n        sheet.setCellHash(cell.row, cell.column, cellHash);\r\n        break;\r\n        \r\n      case ChangeType.CELL_DELETE:\r\n        const { row, column } = change.details;\r\n        sheet.deleteCell(row, column);\r\n        break;\r\n        \r\n      case ChangeType.COLUMN_ADD:\r\n        sheet.structure.addColumn(change.details as ColumnMetadata);\r\n        break;\r\n        \r\n      case ChangeType.COLUMN_UPDATE:\r\n        const { columnId, updates } = change.details;\r\n        sheet.structure.updateColumn(columnId, updates);\r\n        break;\r\n        \r\n      case ChangeType.COLUMN_DELETE:\r\n        sheet.structure.removeColumn(change.details.columnId);\r\n        break;\r\n        \r\n      case ChangeType.COLUMN_MOVE:\r\n        sheet.structure.moveColumn(change.details.columnId, change.details.newIndex);\r\n        break;\r\n        \r\n      case ChangeType.ROW_ADD:\r\n        sheet.structure.addRow(change.details as RowMetadata);\r\n        break;\r\n        \r\n      case ChangeType.ROW_DELETE:\r\n        sheet.structure.removeRow(change.details.rowId);\r\n        break;\r\n        \r\n      case ChangeType.ROW_SORT:\r\n        // \u8FD9\u91CC\u53EF\u4EE5\u5B9E\u73B0\u5177\u4F53\u7684\u6392\u5E8F\u903B\u8F91\r\n        const { sortCriteria } = change.details;\r\n        this.applySorting(sheet, sortCriteria);\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * \u5E94\u7528\u6392\u5E8F\r\n   */\r\n  private applySorting(sheet: SheetTree, criteria: SortCriteria[]): void {\r\n    // \u83B7\u53D6\u5F53\u524D\u884C\u987A\u5E8F\r\n    const currentOrder = sheet.structure.getRowIds();\r\n    \r\n    // \u8FD9\u91CC\u5E94\u8BE5\u6839\u636E\u5355\u5143\u683C\u6570\u636E\u8FDB\u884C\u6392\u5E8F\r\n    // \u4E3A\u7B80\u5316\uFF0C\u8FD9\u91CC\u53EA\u662F\u91CD\u65B0\u6392\u5217\u884CID\r\n    const sortedOrder = [...currentOrder].sort((a, b) => {\r\n      // \u5B9E\u9645\u6392\u5E8F\u903B\u8F91\u5E94\u8BE5\u6839\u636E\u5355\u5143\u683C\u5185\u5BB9\u8FDB\u884C\r\n      return a.localeCompare(b);\r\n    });\r\n    \r\n    sheet.structure.sortRows(sortedOrder);\r\n  }\r\n\r\n  // ========== \u5BF9\u8C61\u5B58\u50A8 ==========\r\n\r\n  /**\r\n   * \u5B58\u50A8\u5BF9\u8C61\r\n   */\r\n  private storeObject(obj: any): string {\r\n    const hash = obj.hash;\r\n    this.objects.set(hash, obj);\r\n    return hash;\r\n  }\r\n\r\n  /**\r\n   * \u83B7\u53D6\u5BF9\u8C61\r\n   */\r\n  private getObject(hash: string): any {\r\n    return this.objects.get(hash);\r\n  }\r\n\r\n  // ========== \u5206\u652F\u64CD\u4F5C ==========\r\n\r\n  /**\r\n   * \u521B\u5EFA\u5206\u652F\r\n   */\r\n  createBranch(branchName: string): void {\r\n    const currentCommitHash = this.refs.get(this.head);\r\n    if (currentCommitHash) {\r\n      this.refs.set(branchName, currentCommitHash);\r\n    } else {\r\n      throw new Error('Cannot create branch: no commits found');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * \u5207\u6362\u5206\u652F\u6216\u63D0\u4EA4\r\n   */\r\n  checkout(target: string): void {\r\n    if (this.index.size > 0) {\r\n      throw new Error('Cannot checkout: you have unstaged changes');\r\n    }\r\n    \r\n    // \u68C0\u67E5\u662F\u5426\u662F\u5206\u652F\u540D\r\n    if (this.refs.has(target)) {\r\n      this.head = target;\r\n      this.loadWorkingTree();\r\n      return;\r\n    }\r\n    \r\n    // \u68C0\u67E5\u662F\u5426\u662F\u63D0\u4EA4\u54C8\u5E0C\r\n    const commit = this.getObject(target);\r\n    if (commit && commit.type === ObjectType.COMMIT) {\r\n      // \u5207\u6362\u5230\u5206\u79BBHEAD\u72B6\u6001\r\n      this.head = target;\r\n      this.loadWorkingTreeFromCommit(target);\r\n      return;\r\n    }\r\n    \r\n    throw new Error(`Branch or commit '${target}' does not exist`);\r\n  }\r\n\r\n  /**\r\n   * \u4ECE\u6307\u5B9A\u63D0\u4EA4\u52A0\u8F7D\u5DE5\u4F5C\u533A\r\n   */\r\n  private loadWorkingTreeFromCommit(commitHash: string): void {\r\n    const commit = this.getObject(commitHash) as CommitObject;\r\n    if (commit) {\r\n      const tree = this.getObject(commit.tree) as SheetTree;\r\n      if (tree) {\r\n        this.workingTree.set('default', tree.clone());\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * \u83B7\u53D6\u5F53\u524D\u5206\u652F\r\n   */\r\n  getCurrentBranch(): string {\r\n    return this.head;\r\n  }\r\n\r\n  /**\r\n   * \u68C0\u67E5\u5F53\u524D\u662F\u5426\u5904\u4E8E\u5206\u79BBHEAD\u72B6\u6001\r\n   */\r\n  isDetachedHead(): boolean {\r\n    return !this.refs.has(this.head);\r\n  }\r\n\r\n  /**\r\n   * \u83B7\u53D6\u5F53\u524DHEAD\u6307\u5411\u7684\u63D0\u4EA4\u54C8\u5E0C\r\n   */\r\n  getCurrentCommitHash(): string | undefined {\r\n    if (this.isDetachedHead()) {\r\n      return this.head; // \u5206\u79BBHEAD\u72B6\u6001\u4E0B\uFF0Chead\u76F4\u63A5\u662F\u63D0\u4EA4\u54C8\u5E0C\r\n    }\r\n    return this.refs.get(this.head);\r\n  }\r\n\r\n  /**\r\n   * \u83B7\u53D6\u6240\u6709\u5206\u652F\r\n   */\r\n  getBranches(): string[] {\r\n    return Array.from(this.refs.keys());\r\n  }\r\n\r\n  /**\r\n   * \u52A0\u8F7D\u5DE5\u4F5C\u533A\r\n   */\r\n  private loadWorkingTree(): void {\r\n    const commitHash = this.refs.get(this.head);\r\n    if (commitHash) {\r\n      const commit = this.getObject(commitHash) as CommitObject;\r\n      if (commit) {\r\n        const tree = this.getObject(commit.tree) as SheetTree;\r\n        if (tree) {\r\n          this.workingTree.set('default', tree.clone());\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // ========== \u72B6\u6001\u67E5\u8BE2 ==========\r\n\r\n  /**\r\n   * \u83B7\u53D6\u5F53\u524D\u72B6\u6001\r\n   */\r\n  status(): {\r\n    branch: string;\r\n    stagedChanges: number;\r\n    lastCommit?: string;\r\n  } {\r\n    const lastCommitHash = this.refs.get(this.head);\r\n    return {\r\n      branch: this.head,\r\n      stagedChanges: this.index.size,\r\n      lastCommit: lastCommitHash ? this.getObject(lastCommitHash)?.getShortHash() : undefined\r\n    };\r\n  }\r\n\r\n  /**\r\n   * \u83B7\u53D6\u6682\u5B58\u533A\u53D8\u66F4\r\n   */\r\n  getStagedChanges(): Change[] {\r\n    return Array.from(this.index.values());\r\n  }\r\n\r\n  /**\r\n   * \u91CD\u7F6E\u6682\u5B58\u533A\r\n   */\r\n  reset(): void {\r\n    this.index.clear();\r\n  }\r\n\r\n  /**\r\n   * \u83B7\u53D6\u63D0\u4EA4\u5386\u53F2\r\n   */\r\n  getCommitHistory(limit: number = 10): CommitObject[] {\r\n    const history: CommitObject[] = [];\r\n    let currentHash = this.refs.get(this.head);\r\n    \r\n    while (currentHash && history.length < limit) {\r\n      const commit = this.getObject(currentHash) as CommitObject;\r\n      if (!commit) break;\r\n      \r\n      history.push(commit);\r\n      currentHash = commit.parent;\r\n    }\r\n    \r\n    return history;\r\n  }\r\n\r\n  /**\r\n   * \u83B7\u53D6\u5DE5\u4F5C\u533A\u5185\u5BB9\r\n   */\r\n  getWorkingTree(): SheetTree | undefined {\r\n    return this.workingTree.get('default');\r\n  }\r\n\r\n  /**\r\n   * \u83B7\u53D6\u5355\u5143\u683C\u503C\r\n   */\r\n  getCellValue(row: number, col: number): CellValue | undefined {\r\n    const sheet = this.workingTree.get('default');\r\n    if (!sheet) return undefined;\r\n    \r\n    const cellHash = sheet.getCellHash(row, col);\r\n    if (!cellHash) return undefined;\r\n    \r\n    const cell = this.getObject(cellHash) as CellObject;\r\n    return cell?.value;\r\n  }\r\n\r\n  /**\r\n   * \u83B7\u53D6\u5355\u5143\u683C\u5BF9\u8C61\r\n   */\r\n  getCell(row: number, col: number): CellObject | undefined {\r\n    const sheet = this.workingTree.get('default');\r\n    if (!sheet) return undefined;\r\n    \r\n    const cellHash = sheet.getCellHash(row, col);\r\n    if (!cellHash) return undefined;\r\n    \r\n    return this.getObject(cellHash) as CellObject;\r\n  }\r\n\r\n\r\n}\r\n", "import { DiffResult, CellConflict, StructureConflict, ColumnMetadata } from '../types';\r\nimport { CellObject } from './cell';\r\nimport { SheetTree } from './sheet';\r\nimport { CommitObject } from './commit';\r\nimport { TableGit } from './table-git';\r\nimport { deepEqual } from '../utils/hash';\r\n\r\n/**\r\n * \u5DEE\u5F02\u8BA1\u7B97\u548C\u5408\u5E76\u5DE5\u5177\u7C7B\r\n */\r\nexport class DiffMergeEngine {\r\n  private tableGit: TableGit;\r\n\r\n  constructor(tableGit: TableGit) {\r\n    this.tableGit = tableGit;\r\n  }\r\n\r\n  /**\r\n   * \u8BA1\u7B97\u4E24\u4E2A\u63D0\u4EA4\u4E4B\u95F4\u7684\u5DEE\u5F02\r\n   */\r\n  diff(commitHash1: string, commitHash2: string): DiffResult {\r\n    const commit1 = this.getObject(commitHash1) as CommitObject;\r\n    const commit2 = this.getObject(commitHash2) as CommitObject;\r\n    \r\n    if (!commit1 || !commit2) {\r\n      throw new Error('Invalid commit hash');\r\n    }\r\n    \r\n    const tree1 = this.getObject(commit1.tree) as SheetTree;\r\n    const tree2 = this.getObject(commit2.tree) as SheetTree;\r\n    \r\n    return this.diffTrees(tree1, tree2);\r\n  }\r\n\r\n  /**\r\n   * \u6BD4\u8F83\u4E24\u4E2A\u6811\u5BF9\u8C61\r\n   */\r\n  private diffTrees(tree1: SheetTree, tree2: SheetTree): DiffResult {\r\n    const result: DiffResult = {\r\n      cellChanges: {\r\n        added: [],\r\n        modified: [],\r\n        deleted: []\r\n      },\r\n      structureChanges: {\r\n        columns: {\r\n          added: [],\r\n          modified: [],\r\n          deleted: [],\r\n          moved: []\r\n        },\r\n        rows: {\r\n          added: [],\r\n          modified: [],\r\n          deleted: [],\r\n          sorted: { oldOrder: [], newOrder: [] }\r\n        }\r\n      }\r\n    };\r\n\r\n    // \u6BD4\u8F83\u5355\u5143\u683C\r\n    this.diffCells(tree1, tree2, result);\r\n    \r\n    // \u6BD4\u8F83\u7ED3\u6784\r\n    this.diffStructure(tree1, tree2, result);\r\n    \r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * \u6BD4\u8F83\u5355\u5143\u683C\u5DEE\u5F02\r\n   */\r\n  private diffCells(tree1: SheetTree, tree2: SheetTree, result: DiffResult): void {\r\n    const allCellKeys = new Set([...tree1.cells.keys(), ...tree2.cells.keys()]);\r\n    \r\n    for (const key of allCellKeys) {\r\n      const hash1 = tree1.cells.get(key);\r\n      const hash2 = tree2.cells.get(key);\r\n      \r\n      if (!hash1 && hash2) {\r\n        // \u65B0\u589E\u7684\u5355\u5143\u683C\r\n        const cell = this.getObject(hash2) as CellObject;\r\n        result.cellChanges.added.push(cell);\r\n      } else if (hash1 && !hash2) {\r\n        // \u5220\u9664\u7684\u5355\u5143\u683C\r\n        const cell = this.getObject(hash1) as CellObject;\r\n        result.cellChanges.deleted.push(cell);\r\n      } else if (hash1 !== hash2) {\r\n        // \u4FEE\u6539\u7684\u5355\u5143\u683C\r\n        if (hash1 && hash2) {\r\n          const oldCell = this.getObject(hash1) as CellObject;\r\n          const newCell = this.getObject(hash2) as CellObject;\r\n          result.cellChanges.modified.push({ old: oldCell, new: newCell });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * \u6BD4\u8F83\u7ED3\u6784\u5DEE\u5F02\r\n   */\r\n  private diffStructure(tree1: SheetTree, tree2: SheetTree, result: DiffResult): void {\r\n    const columns1 = tree1.structure.columns;\r\n    const columns2 = tree2.structure.columns;\r\n    \r\n    // \u68C0\u67E5\u65B0\u589E\u548C\u4FEE\u6539\u7684\u5217\r\n    for (const [id, col2] of columns2) {\r\n      const col1 = columns1.get(id);\r\n      if (!col1) {\r\n        result.structureChanges.columns.added.push(col2);\r\n      } else if (!deepEqual(col1, col2)) {\r\n        result.structureChanges.columns.modified.push({ old: col1, new: col2 });\r\n      }\r\n    }\r\n    \r\n    // \u68C0\u67E5\u5220\u9664\u7684\u5217\r\n    for (const [id, col1] of columns1) {\r\n      if (!columns2.has(id)) {\r\n        result.structureChanges.columns.deleted.push(col1);\r\n      }\r\n    }\r\n    \r\n    // \u68C0\u67E5\u5217\u987A\u5E8F\u53D8\u5316\r\n    this.diffColumnOrder(tree1, tree2, result);\r\n    \r\n    // \u68C0\u67E5\u884C\u987A\u5E8F\u53D8\u5316\r\n    this.diffRowOrder(tree1, tree2, result);\r\n  }\r\n\r\n  /**\r\n   * \u6BD4\u8F83\u5217\u987A\u5E8F\u5DEE\u5F02\r\n   */\r\n  private diffColumnOrder(tree1: SheetTree, tree2: SheetTree, result: DiffResult): void {\r\n    const order1 = tree1.structure.columnOrder;\r\n    const order2 = tree2.structure.columnOrder;\r\n    \r\n    if (!deepEqual(order1, order2)) {\r\n      // \u5206\u6790\u5177\u4F53\u7684\u79FB\u52A8\u64CD\u4F5C\r\n      for (let i = 0; i < order2.length; i++) {\r\n        const colId = order2[i];\r\n        const oldIndex = order1.indexOf(colId);\r\n        if (oldIndex !== -1 && oldIndex !== i) {\r\n          const column = tree2.structure.columns.get(colId);\r\n          if (column) {\r\n            result.structureChanges.columns.moved.push({\r\n              column,\r\n              oldIndex,\r\n              newIndex: i\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * \u6BD4\u8F83\u884C\u987A\u5E8F\u5DEE\u5F02\r\n   */\r\n  private diffRowOrder(tree1: SheetTree, tree2: SheetTree, result: DiffResult): void {\r\n    const order1 = tree1.structure.rowOrder;\r\n    const order2 = tree2.structure.rowOrder;\r\n    \r\n    if (!deepEqual(order1, order2)) {\r\n      result.structureChanges.rows.sorted = {\r\n        oldOrder: order1,\r\n        newOrder: order2\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * \u4E09\u8DEF\u5408\u5E76\r\n   */\r\n  merge(branchName: string): { success: boolean; conflicts?: any[] } {\r\n    const currentCommitHash = this.getCurrentCommitHash();\r\n    const targetCommitHash = this.getBranchCommitHash(branchName);\r\n    \r\n    if (!currentCommitHash || !targetCommitHash) {\r\n      return { success: false };\r\n    }\r\n    \r\n    // \u627E\u5230\u5171\u540C\u7956\u5148\r\n    const baseCommitHash = this.findCommonAncestor(currentCommitHash, targetCommitHash);\r\n    \r\n    if (!baseCommitHash) {\r\n      return { success: false };\r\n    }\r\n    \r\n    // \u4E09\u8DEF\u5408\u5E76\r\n    const conflicts = this.threeWayMerge(baseCommitHash, currentCommitHash, targetCommitHash);\r\n    \r\n    if (conflicts.length === 0) {\r\n      // \u81EA\u52A8\u5408\u5E76\u6210\u529F\uFF0C\u5E94\u8BE5\u521B\u5EFA\u5408\u5E76\u63D0\u4EA4\r\n      return { success: true };\r\n    } else {\r\n      // \u5B58\u5728\u51B2\u7A81\r\n      return { success: false, conflicts };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * \u4E09\u8DEF\u5408\u5E76\u5B9E\u73B0\r\n   */\r\n  private threeWayMerge(baseHash: string, currentHash: string, targetHash: string): any[] {\r\n    const conflicts: any[] = [];\r\n    \r\n    const baseCommit = this.getObject(baseHash) as CommitObject;\r\n    const currentCommit = this.getObject(currentHash) as CommitObject;\r\n    const targetCommit = this.getObject(targetHash) as CommitObject;\r\n    \r\n    const baseTree = this.getObject(baseCommit.tree) as SheetTree;\r\n    const currentTree = this.getObject(currentCommit.tree) as SheetTree;\r\n    const targetTree = this.getObject(targetCommit.tree) as SheetTree;\r\n    \r\n    // \u5408\u5E76\u5355\u5143\u683C\r\n    this.mergeCells(baseTree, currentTree, targetTree, conflicts);\r\n    \r\n    // \u5408\u5E76\u7ED3\u6784\r\n    this.mergeStructure(baseTree, currentTree, targetTree, conflicts);\r\n    \r\n    return conflicts;\r\n  }\r\n\r\n  /**\r\n   * \u5408\u5E76\u5355\u5143\u683C\r\n   */\r\n  private mergeCells(\r\n    baseTree: SheetTree, \r\n    currentTree: SheetTree, \r\n    targetTree: SheetTree, \r\n    conflicts: any[]\r\n  ): void {\r\n    const allCellKeys = new Set([\r\n      ...baseTree.cells.keys(),\r\n      ...currentTree.cells.keys(),\r\n      ...targetTree.cells.keys()\r\n    ]);\r\n    \r\n    for (const key of allCellKeys) {\r\n      const baseCell = baseTree.cells.get(key);\r\n      const currentCell = currentTree.cells.get(key);\r\n      const targetCell = targetTree.cells.get(key);\r\n      \r\n      if (currentCell !== targetCell) {\r\n        if (baseCell === currentCell) {\r\n          // \u53EA\u6709\u76EE\u6807\u5206\u652F\u4FEE\u6539\u4E86\uFF0C\u63A5\u53D7\u76EE\u6807\u5206\u652F\u7684\u4FEE\u6539\r\n          continue;\r\n        } else if (baseCell === targetCell) {\r\n          // \u53EA\u6709\u5F53\u524D\u5206\u652F\u4FEE\u6539\u4E86\uFF0C\u4FDD\u7559\u5F53\u524D\u5206\u652F\u7684\u4FEE\u6539\r\n          continue;\r\n        } else {\r\n          // \u53CC\u65B9\u90FD\u4FEE\u6539\u4E86\uFF0C\u4EA7\u751F\u51B2\u7A81\r\n          conflicts.push({\r\n            type: 'cell',\r\n            position: key,\r\n            base: baseCell ? this.getObject(baseCell) : null,\r\n            current: currentCell ? this.getObject(currentCell) : null,\r\n            target: targetCell ? this.getObject(targetCell) : null\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * \u5408\u5E76\u7ED3\u6784\r\n   */\r\n  private mergeStructure(\r\n    baseTree: SheetTree, \r\n    currentTree: SheetTree, \r\n    targetTree: SheetTree, \r\n    conflicts: any[]\r\n  ): void {\r\n    // \u5408\u5E76\u5217\u7ED3\u6784\r\n    this.mergeColumns(baseTree, currentTree, targetTree, conflicts);\r\n    \r\n    // \u5408\u5E76\u884C\u7ED3\u6784\r\n    this.mergeRows(baseTree, currentTree, targetTree, conflicts);\r\n  }\r\n\r\n  /**\r\n   * \u5408\u5E76\u5217\u7ED3\u6784\r\n   */\r\n  private mergeColumns(\r\n    baseTree: SheetTree, \r\n    currentTree: SheetTree, \r\n    targetTree: SheetTree, \r\n    conflicts: any[]\r\n  ): void {\r\n    const baseColumns = baseTree.structure.columns;\r\n    const currentColumns = currentTree.structure.columns;\r\n    const targetColumns = targetTree.structure.columns;\r\n    \r\n    const allColumnIds = new Set([\r\n      ...baseColumns.keys(),\r\n      ...currentColumns.keys(),\r\n      ...targetColumns.keys()\r\n    ]);\r\n    \r\n    for (const id of allColumnIds) {\r\n      const baseCol = baseColumns.get(id);\r\n      const currentCol = currentColumns.get(id);\r\n      const targetCol = targetColumns.get(id);\r\n      \r\n      if (!deepEqual(currentCol, targetCol)) {\r\n        if (deepEqual(baseCol, currentCol)) {\r\n          // \u53EA\u6709\u76EE\u6807\u5206\u652F\u4FEE\u6539\u4E86\r\n          continue;\r\n        } else if (deepEqual(baseCol, targetCol)) {\r\n          // \u53EA\u6709\u5F53\u524D\u5206\u652F\u4FEE\u6539\u4E86\r\n          continue;\r\n        } else {\r\n          // \u53CC\u65B9\u90FD\u4FEE\u6539\u4E86\uFF0C\u4EA7\u751F\u51B2\u7A81\r\n          conflicts.push({\r\n            type: 'column',\r\n            id,\r\n            base: baseCol,\r\n            current: currentCol,\r\n            target: targetCol\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * \u5408\u5E76\u884C\u7ED3\u6784\r\n   */\r\n  private mergeRows(\r\n    baseTree: SheetTree, \r\n    currentTree: SheetTree, \r\n    targetTree: SheetTree, \r\n    conflicts: any[]\r\n  ): void {\r\n    // \u7C7B\u4F3C\u4E8E\u5217\u7684\u5408\u5E76\u903B\u8F91\r\n    // \u8FD9\u91CC\u7B80\u5316\u5904\u7406\r\n  }\r\n\r\n  /**\r\n   * \u627E\u5230\u5171\u540C\u7956\u5148\r\n   */\r\n  private findCommonAncestor(hash1: string, hash2: string): string | null {\r\n    const history1 = this.getCommitHistory(hash1);\r\n    const history2 = this.getCommitHistory(hash2);\r\n    \r\n    for (const commit of history1) {\r\n      if (history2.includes(commit)) {\r\n        return commit;\r\n      }\r\n    }\r\n    \r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * \u83B7\u53D6\u63D0\u4EA4\u5386\u53F2\r\n   */\r\n  private getCommitHistory(commitHash: string): string[] {\r\n    const history: string[] = [];\r\n    let current = commitHash;\r\n    \r\n    while (current) {\r\n      history.push(current);\r\n      const commit = this.getObject(current) as CommitObject;\r\n      if (!commit) break;\r\n      current = commit.parent || '';\r\n    }\r\n    \r\n    return history;\r\n  }\r\n\r\n  // \u8F85\u52A9\u65B9\u6CD5\r\n\r\n  private getObject(hash: string): any {\r\n    return (this.tableGit as any).objects.get(hash);\r\n  }\r\n\r\n  private getCurrentCommitHash(): string | undefined {\r\n    return (this.tableGit as any).refs.get((this.tableGit as any).head);\r\n  }\r\n\r\n  private getBranchCommitHash(branchName: string): string | undefined {\r\n    return (this.tableGit as any).refs.get(branchName);\r\n  }\r\n}\r\n", "import { CellConflict, StructureConflict, ColumnMetadata, CellValue, CellFormat } from '../types';\r\nimport { CellObject } from './cell';\r\nimport { deepClone } from '../utils/hash';\r\n\r\n/**\r\n * \u51B2\u7A81\u89E3\u51B3\u7B56\u7565\r\n */\r\nexport type ResolutionStrategy = 'current' | 'target' | 'manual' | 'merge';\r\n\r\n/**\r\n * \u81EA\u5B9A\u4E49\u89E3\u51B3\u65B9\u6848\r\n */\r\nexport interface CustomResolution {\r\n  value?: CellValue;\r\n  formula?: string;\r\n  format?: CellFormat;\r\n}\r\n\r\n/**\r\n * \u51B2\u7A81\u89E3\u51B3\u5668 - \u5904\u7406\u5408\u5E76\u51B2\u7A81\r\n */\r\nexport class ConflictResolver {\r\n  private defaultStrategy: ResolutionStrategy = 'manual';\r\n\r\n  constructor(defaultStrategy: ResolutionStrategy = 'manual') {\r\n    this.defaultStrategy = defaultStrategy;\r\n  }\r\n\r\n  /**\r\n   * \u89E3\u51B3\u5355\u5143\u683C\u51B2\u7A81\r\n   */\r\n  resolveCellConflict(\r\n    conflict: CellConflict, \r\n    resolution: ResolutionStrategy | CustomResolution = this.defaultStrategy\r\n  ): CellObject | null {\r\n    \r\n    if (typeof resolution === 'object') {\r\n      // \u81EA\u5B9A\u4E49\u89E3\u51B3\u65B9\u6848\r\n      return this.createCustomCell(conflict, resolution);\r\n    }\r\n\r\n    switch (resolution) {\r\n      case 'current':\r\n        return conflict.current || null;\r\n      \r\n      case 'target':\r\n        return conflict.target || null;\r\n      \r\n      case 'merge':\r\n        return this.mergeCell(conflict);\r\n      \r\n      case 'manual':\r\n      default:\r\n        // \u8FD4\u56DEnull\u8868\u793A\u9700\u8981\u624B\u52A8\u89E3\u51B3\r\n        return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * \u89E3\u51B3\u7ED3\u6784\u51B2\u7A81\r\n   */\r\n  resolveStructureConflict(\r\n    conflict: StructureConflict, \r\n    resolution: ResolutionStrategy = this.defaultStrategy\r\n  ): any {\r\n    \r\n    switch (resolution) {\r\n      case 'current':\r\n        return conflict.current;\r\n      \r\n      case 'target':\r\n        return conflict.target;\r\n      \r\n      case 'merge':\r\n        return this.mergeStructure(conflict);\r\n      \r\n      case 'manual':\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * \u6279\u91CF\u89E3\u51B3\u51B2\u7A81\r\n   */\r\n  batchResolve(\r\n    conflicts: (CellConflict | StructureConflict)[], \r\n    strategy: ResolutionStrategy\r\n  ): any[] {\r\n    return conflicts.map(conflict => {\r\n      if ('position' in conflict) {\r\n        return this.resolveCellConflict(conflict as CellConflict, strategy);\r\n      } else {\r\n        return this.resolveStructureConflict(conflict as StructureConflict, strategy);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * \u667A\u80FD\u5408\u5E76\u5355\u5143\u683C\r\n   */\r\n  private mergeCell(conflict: CellConflict): CellObject | null {\r\n    const { base, current, target } = conflict;\r\n    \r\n    if (!current && !target) {\r\n      return null;\r\n    }\r\n    \r\n    if (!current) return target;\r\n    if (!target) return current;\r\n    \r\n    // \u5C1D\u8BD5\u667A\u80FD\u5408\u5E76\r\n    const mergedCell = this.createMergedCell(base, current, target);\r\n    return mergedCell;\r\n  }\r\n\r\n  /**\r\n   * \u521B\u5EFA\u5408\u5E76\u540E\u7684\u5355\u5143\u683C\r\n   */\r\n  private createMergedCell(base?: CellObject, current?: CellObject, target?: CellObject): CellObject {\r\n    if (!current && !target) {\r\n      throw new Error('Cannot merge: both current and target are null');\r\n    }\r\n    \r\n    const reference = current || target!;\r\n    \r\n    // \u9ED8\u8BA4\u4F7F\u7528\u5F53\u524D\u5206\u652F\u7684\u503C\uFF0C\u4F46\u5408\u5E76\u683C\u5F0F\u4FE1\u606F\r\n    const value = this.mergeValue(base?.value, current?.value, target?.value);\r\n    const formula = this.mergeFormula(base?.formula, current?.formula, target?.formula);\r\n    const format = this.mergeFormat(base?.format, current?.format, target?.format);\r\n    \r\n    return new CellObject(reference.row, reference.column, value, formula, format);\r\n  }\r\n\r\n  /**\r\n   * \u5408\u5E76\u5355\u5143\u683C\u503C\r\n   */\r\n  private mergeValue(base?: CellValue, current?: CellValue, target?: CellValue): CellValue {\r\n    // \u5982\u679C\u662F\u6570\u5B57\uFF0C\u5C1D\u8BD5\u53D6\u5E73\u5747\u503C\r\n    if (typeof current === 'number' && typeof target === 'number') {\r\n      return (current + target) / 2;\r\n    }\r\n    \r\n    // \u5982\u679C\u662F\u5B57\u7B26\u4E32\uFF0C\u5C1D\u8BD5\u8FDE\u63A5\r\n    if (typeof current === 'string' && typeof target === 'string' && current !== target) {\r\n      return `${current} | ${target}`;\r\n    }\r\n    \r\n    // \u9ED8\u8BA4\u8FD4\u56DE\u5F53\u524D\u503C\r\n    return current !== undefined ? current : (target !== undefined ? target : null);\r\n  }\r\n\r\n  /**\r\n   * \u5408\u5E76\u516C\u5F0F\r\n   */\r\n  private mergeFormula(base?: string, current?: string, target?: string): string | undefined {\r\n    // \u4F18\u5148\u4F7F\u7528\u975E\u7A7A\u7684\u516C\u5F0F\r\n    return current || target;\r\n  }\r\n\r\n  /**\r\n   * \u5408\u5E76\u683C\u5F0F\r\n   */\r\n  private mergeFormat(base?: CellFormat, current?: CellFormat, target?: CellFormat): CellFormat | undefined {\r\n    if (!current && !target) return undefined;\r\n    if (!current) return deepClone(target);\r\n    if (!target) return deepClone(current);\r\n    \r\n    // \u5408\u5E76\u683C\u5F0F\u5C5E\u6027\r\n    return {\r\n      ...target,\r\n      ...current,  // \u5F53\u524D\u5206\u652F\u7684\u683C\u5F0F\u4F18\u5148\u7EA7\u66F4\u9AD8\r\n      // \u4F46\u67D0\u4E9B\u5C5E\u6027\u53EF\u4EE5\u667A\u80FD\u5408\u5E76\r\n      backgroundColor: current.backgroundColor || target.backgroundColor,\r\n      textColor: current.textColor || target.textColor,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * \u521B\u5EFA\u81EA\u5B9A\u4E49\u5355\u5143\u683C\r\n   */\r\n  private createCustomCell(conflict: CellConflict, resolution: CustomResolution): CellObject | null {\r\n    const reference = conflict.current || conflict.target;\r\n    if (!reference) return null;\r\n    \r\n    return new CellObject(\r\n      reference.row,\r\n      reference.column,\r\n      resolution.value !== undefined ? resolution.value : reference.value,\r\n      resolution.formula !== undefined ? resolution.formula : reference.formula,\r\n      resolution.format !== undefined ? resolution.format : reference.format\r\n    );\r\n  }\r\n\r\n  /**\r\n   * \u667A\u80FD\u5408\u5E76\u7ED3\u6784\r\n   */\r\n  private mergeStructure(conflict: StructureConflict): any {\r\n    if (conflict.type === 'column') {\r\n      return this.mergeColumnMetadata(\r\n        conflict.base as ColumnMetadata,\r\n        conflict.current as ColumnMetadata,\r\n        conflict.target as ColumnMetadata\r\n      );\r\n    }\r\n    \r\n    // \u5BF9\u4E8E\u884C\uFF0C\u6682\u65F6\u8FD4\u56DE\u5F53\u524D\u5206\u652F\u7684\u5185\u5BB9\r\n    return conflict.current;\r\n  }\r\n\r\n  /**\r\n   * \u5408\u5E76\u5217\u5143\u6570\u636E\r\n   */\r\n  private mergeColumnMetadata(\r\n    base?: ColumnMetadata, \r\n    current?: ColumnMetadata, \r\n    target?: ColumnMetadata\r\n  ): ColumnMetadata {\r\n    \r\n    if (!current && !target) {\r\n      return base!;\r\n    }\r\n    \r\n    if (!current) return deepClone(target!);\r\n    if (!target) return deepClone(current);\r\n    \r\n    // \u667A\u80FD\u5408\u5E76\u5217\u5143\u6570\u636E\r\n    const merged: ColumnMetadata = {\r\n      id: current.id,\r\n      description: this.mergeStringField(base?.description, current.description, target.description),\r\n      dataType: current.dataType !== base?.dataType ? current.dataType : target.dataType,\r\n      width: current.width !== base?.width ? current.width : target.width,\r\n      hidden: current.hidden !== base?.hidden ? current.hidden : target.hidden,\r\n      order: current.order,\r\n      constraints: this.mergeConstraints(base?.constraints, current.constraints, target.constraints)\r\n    };\r\n    \r\n    return merged;\r\n  }\r\n\r\n  /**\r\n   * \u5408\u5E76\u5B57\u7B26\u4E32\u5B57\u6BB5\r\n   */\r\n  private mergeStringField(base?: string, current?: string, target?: string): string {\r\n    if (current === base) {\r\n      return target || current || '';\r\n    }\r\n    if (target === base) {\r\n      return current || target || '';\r\n    }\r\n    \r\n    // \u4E24\u8FB9\u90FD\u4FEE\u6539\u4E86\uFF0C\u4F18\u5148\u4F7F\u7528\u5F53\u524D\u5206\u652F\r\n    return current || target || '';\r\n  }\r\n\r\n  /**\r\n   * \u5408\u5E76\u7EA6\u675F\u6761\u4EF6\r\n   */\r\n  private mergeConstraints(base?: any, current?: any, target?: any): any {\r\n    return {\r\n      ...base,\r\n      ...target,\r\n      ...current  // \u5F53\u524D\u5206\u652F\u7684\u7EA6\u675F\u4F18\u5148\u7EA7\u6700\u9AD8\r\n    };\r\n  }\r\n\r\n  /**\r\n   * \u751F\u6210\u51B2\u7A81\u62A5\u544A\r\n   */\r\n  generateConflictReport(conflicts: (CellConflict | StructureConflict)[]): string {\r\n    const cellConflicts = conflicts.filter(c => 'position' in c) as CellConflict[];\r\n    const structureConflicts = conflicts.filter(c => 'type' in c) as StructureConflict[];\r\n    \r\n    let report = `\u51B2\u7A81\u62A5\u544A (${conflicts.length} \u4E2A\u51B2\u7A81)\\n\\n`;\r\n    \r\n    if (cellConflicts.length > 0) {\r\n      report += `\u5355\u5143\u683C\u51B2\u7A81 (${cellConflicts.length} \u4E2A):\\n`;\r\n      cellConflicts.forEach((conflict, index) => {\r\n        report += `${index + 1}. \u4F4D\u7F6E ${conflict.position}\\n`;\r\n        report += `   \u5F53\u524D\u503C: ${this.formatCellValue(conflict.current)}\\n`;\r\n        report += `   \u76EE\u6807\u503C: ${this.formatCellValue(conflict.target)}\\n\\n`;\r\n      });\r\n    }\r\n    \r\n    if (structureConflicts.length > 0) {\r\n      report += `\u7ED3\u6784\u51B2\u7A81 (${structureConflicts.length} \u4E2A):\\n`;\r\n      structureConflicts.forEach((conflict, index) => {\r\n        report += `${index + 1}. ${conflict.type} \"${conflict.id}\"\\n`;\r\n        report += `   \u5F53\u524D: ${JSON.stringify(conflict.current, null, 2)}\\n`;\r\n        report += `   \u76EE\u6807: ${JSON.stringify(conflict.target, null, 2)}\\n\\n`;\r\n      });\r\n    }\r\n    \r\n    return report;\r\n  }\r\n\r\n  /**\r\n   * \u683C\u5F0F\u5316\u5355\u5143\u683C\u503C\u663E\u793A\r\n   */\r\n  private formatCellValue(cell?: CellObject): string {\r\n    if (!cell) return '(\u7A7A)';\r\n    \r\n    let display = `\u503C: ${cell.value}`;\r\n    if (cell.formula) {\r\n      display += `, \u516C\u5F0F: ${cell.formula}`;\r\n    }\r\n    return display;\r\n  }\r\n\r\n  /**\r\n   * \u68C0\u67E5\u51B2\u7A81\u662F\u5426\u53EF\u4EE5\u81EA\u52A8\u89E3\u51B3\r\n   */\r\n  canAutoResolve(conflict: CellConflict | StructureConflict): boolean {\r\n    if ('position' in conflict) {\r\n      // \u5355\u5143\u683C\u51B2\u7A81\r\n      const cellConflict = conflict as CellConflict;\r\n      \r\n      // \u5982\u679C\u5176\u4E2D\u4E00\u4E2A\u662F\u7A7A\u503C\uFF0C\u53EF\u4EE5\u81EA\u52A8\u89E3\u51B3\r\n      if (!cellConflict.current || !cellConflict.target) {\r\n        return true;\r\n      }\r\n      \r\n      // \u5982\u679C\u503C\u76F8\u540C\uFF0C\u53EF\u4EE5\u81EA\u52A8\u89E3\u51B3\r\n      if (cellConflict.current.value === cellConflict.target.value) {\r\n        return true;\r\n      }\r\n      \r\n      return false;\r\n    } else {\r\n      // \u7ED3\u6784\u51B2\u7A81\u901A\u5E38\u9700\u8981\u624B\u52A8\u89E3\u51B3\r\n      return false;\r\n    }\r\n  }\r\n}\r\n", "import { TableGit } from '../core/table-git';\r\nimport { CellObject } from '../core/cell';\r\nimport { ColumnMetadata, RowMetadata, CellValue, CellFormat } from '../types';\r\nimport { generateId } from './hash';\r\n\r\n/**\r\n * \u521B\u5EFA\u8868\u683CGit\u5B9E\u4F8B\u7684\u4FBF\u5229\u51FD\u6570\r\n */\r\nexport function createTableGit(branchName: string = 'main'): TableGit {\r\n  const tableGit = new TableGit();\r\n  tableGit.init(branchName);\r\n  return tableGit;\r\n}\r\n\r\n/**\r\n * \u521B\u5EFA\u5355\u5143\u683C\u7684\u4FBF\u5229\u51FD\u6570\r\n */\r\nexport function createCell(\r\n  row: number,\r\n  column: number,\r\n  value: CellValue,\r\n  formula?: string,\r\n  format?: CellFormat\r\n): CellObject {\r\n  return new CellObject(row, column, value, formula, format);\r\n}\r\n\r\n/**\r\n * \u521B\u5EFA\u5217\u5143\u6570\u636E\u7684\u4FBF\u5229\u51FD\u6570\r\n */\r\nexport function createColumn(\r\n  id?: string,\r\n  options: {\r\n    description?: string;\r\n    dataType?: 'string' | 'number' | 'date' | 'boolean' | 'mixed';\r\n    width?: number;\r\n    hidden?: boolean;\r\n    order?: number;\r\n    constraints?: {\r\n      required?: boolean;\r\n      unique?: boolean;\r\n      pattern?: string;\r\n      min?: number;\r\n      max?: number;\r\n    };\r\n  } = {}\r\n): ColumnMetadata {\r\n  return {\r\n    id: id || generateId('col_'),\r\n    description: options.description,\r\n    dataType: options.dataType || 'mixed',\r\n    width: options.width || 100,\r\n    hidden: options.hidden || false,\r\n    order: options.order || 0,\r\n    constraints: options.constraints\r\n  };\r\n}\r\n\r\n/**\r\n * \u521B\u5EFA\u884C\u5143\u6570\u636E\u7684\u4FBF\u5229\u51FD\u6570\r\n */\r\nexport function createRow(\r\n  options: {\r\n    id?: string;\r\n    height?: number;\r\n    hidden?: boolean;\r\n    order?: number;\r\n  } = {}\r\n): RowMetadata {\r\n  return {\r\n    id: options.id || generateId('row_'),\r\n    height: options.height || 25,\r\n    hidden: options.hidden || false,\r\n    order: options.order || 0\r\n  };\r\n}\r\n\r\n/**\r\n * \u521B\u5EFA\u5305\u542B\u793A\u4F8B\u6570\u636E\u7684\u8868\u683C\r\n */\r\nexport function createSampleTable(): TableGit {\r\n  const repo = createTableGit();\r\n  \r\n  // \u6DFB\u52A0\u5217\u5B9A\u4E49 - \u53EA\u9700\u8981id\uFF0C\u4E0D\u9700\u8981name\r\n  const columns = [\r\n    createColumn('product_name', { \r\n      dataType: 'string', \r\n      width: 150, \r\n      order: 0,\r\n      constraints: { required: true }\r\n    }),\r\n    createColumn('price', { \r\n      dataType: 'number', \r\n      width: 100, \r\n      order: 1,\r\n      constraints: { required: true, min: 0 }\r\n    }),\r\n    createColumn('stock', { \r\n      dataType: 'number', \r\n      width: 100, \r\n      order: 2\r\n    }),\r\n    createColumn('description', { \r\n      dataType: 'string', \r\n      width: 200, \r\n      order: 3\r\n    })\r\n  ];\r\n  \r\n  // \u6DFB\u52A0\u5217\u5230\u8868\u683C\r\n  columns.forEach(col => repo.addColumn('default', col));\r\n  \r\n  // \u7B2C0\u884C\u4F5C\u4E3A\u5217\u5934\uFF0C\u548C\u666E\u901A\u5355\u5143\u683C\u4E00\u6837\u5904\u7406\r\n  repo.addCellChange('default', 0, 0, '\u4EA7\u54C1\u540D\u79F0', undefined, { fontWeight: 'bold' });\r\n  repo.addCellChange('default', 0, 1, '\u4EF7\u683C', undefined, { fontWeight: 'bold' });\r\n  repo.addCellChange('default', 0, 2, '\u5E93\u5B58', undefined, { fontWeight: 'bold' });\r\n  repo.addCellChange('default', 0, 3, '\u63CF\u8FF0', undefined, { fontWeight: 'bold' });\r\n  \r\n  // \u6DFB\u52A0\u6570\u636E\u884C\r\n  repo.addCellChange('default', 1, 0, 'iPhone 15');\r\n  repo.addCellChange('default', 1, 1, 5999);\r\n  repo.addCellChange('default', 1, 2, 100);\r\n  repo.addCellChange('default', 1, 3, '\u6700\u65B0\u6B3EiPhone');\r\n  \r\n  repo.addCellChange('default', 2, 0, 'MacBook Pro');\r\n  repo.addCellChange('default', 2, 1, 12999);\r\n  repo.addCellChange('default', 2, 2, 50);\r\n  repo.addCellChange('default', 2, 3, '\u4E13\u4E1A\u7EA7\u7B14\u8BB0\u672C\u7535\u8111');\r\n  \r\n  repo.addCellChange('default', 3, 0, 'iPad Air');\r\n  repo.addCellChange('default', 3, 1, 4599);\r\n  repo.addCellChange('default', 3, 2, 75);\r\n  repo.addCellChange('default', 3, 3, '\u8F7B\u8584\u5E73\u677F\u7535\u8111');\r\n  \r\n  // \u63D0\u4EA4\u521D\u59CB\u6570\u636E\r\n  repo.commit('\u521D\u59CB\u5316\u4EA7\u54C1\u8868', 'System', 'system@example.com');\r\n  \r\n  return repo;\r\n}\r\n", "import { TableGit } from '../core/table-git';\r\nimport { SheetTree } from '../core/sheet';\r\nimport { TableData } from './types';\r\nimport { parsePosition } from '../utils/hash';\r\n\r\n// \u5C06\u4ED3\u5E93\u5F53\u524D\u5DE5\u4F5C\u533A\u7684\u6570\u636E\u8F6C\u6362\u6210\u7EDF\u4E00\u7684 TableData\r\nexport class TableDataAdapter {\r\n  constructor(private readonly repo: TableGit, private readonly sheetName: string = 'default') {}\r\n\r\n  build(): TableData {\r\n    const sheet: SheetTree | undefined = this.repo.getWorkingTree();\r\n    if (!sheet) {\r\n      return { header: [], rows: [], matrix: [], minRow: 0, minCol: 0, maxRow: -1, maxCol: -1 };\r\n    }\r\n\r\n    // \u8BA1\u7B97\u8FB9\u754C\r\n    const bounds = sheet.getBounds();\r\n    if (!bounds) {\r\n      return { header: [], rows: [], matrix: [], minRow: 0, minCol: 0, maxRow: -1, maxCol: -1 };\r\n    }\r\n\r\n    const { minRow, minCol, maxRow, maxCol } = bounds;\r\n\r\n    // \u6784\u9020\u77E9\u9635\r\n    const matrix: any[][] = [];\r\n    for (let r = minRow; r <= maxRow; r++) {\r\n      const row: any[] = [];\r\n      for (let c = minCol; c <= maxCol; c++) {\r\n        const hash = sheet.getCellHash(r, c);\r\n        if (!hash) {\r\n          row.push(undefined);\r\n        } else {\r\n          // \u4F7F\u7528 repo.getCell \u53D6\u5F97\u503C\r\n          const cell = this.repo.getCell(r, c);\r\n          row.push(cell ? cell.value : undefined);\r\n        }\r\n      }\r\n      matrix.push(row);\r\n    }\r\n\r\n    const header = (minRow === 0 && matrix.length > 0) ? (matrix[0] as any[]) : [];\r\n    const rows = (minRow === 0) ? matrix.slice(1) : matrix;\r\n\r\n    return { header, rows, matrix, minRow, minCol, maxRow, maxCol };\r\n  }\r\n}\r\n", "import { FormatterFunction, TableData } from './types';\r\n\r\nexport interface FunctionFormatterOptions<TOptions = any> {\r\n  name: string;\r\n  format: FormatterFunction<TOptions, string>;\r\n  defaults?: TOptions;\r\n}\r\n\r\n// \u7B80\u5355\u7684\u51FD\u6570\u5F0F\u683C\u5F0F\u5316\u5668\u5305\u88C5\u5668\r\nexport class FunctionFormatter<TOptions = any> {\r\n  readonly name: string;\r\n  private readonly fn: FormatterFunction<TOptions, string>;\r\n  private readonly defaults?: TOptions;\r\n\r\n  constructor(options: FunctionFormatterOptions<TOptions>) {\r\n    this.name = options.name;\r\n    this.fn = options.format;\r\n    this.defaults = options.defaults;\r\n  }\r\n\r\n  run(data: TableData, options?: Partial<TOptions>): string {\r\n    const finalOptions = { ...(this.defaults as any), ...(options as any) } as TOptions;\r\n    return this.fn(data, finalOptions);\r\n  }\r\n}\r\n\r\n// \u4E00\u4E2A\u7B80\u5355\u7684\u6CE8\u518C\u4E2D\u5FC3\uFF0C\u652F\u6301\u7528\u6237\u6CE8\u518C\u81EA\u5B9A\u4E49\u51FD\u6570\u5F0F\u683C\u5F0F\r\nexport class FormatterRegistry {\r\n  private registry = new Map<string, FunctionFormatter<any>>();\r\n\r\n  register(formatter: FunctionFormatter<any>) {\r\n    this.registry.set(formatter.name, formatter);\r\n  }\r\n\r\n  unregister(name: string) {\r\n    this.registry.delete(name);\r\n  }\r\n\r\n  list(): string[] {\r\n    return [...this.registry.keys()];\r\n  }\r\n\r\n  format(name: string, data: TableData, options?: any): string {\r\n    const f = this.registry.get(name);\r\n    if (!f) throw new Error(`Formatter '${name}' is not registered`);\r\n    return f.run(data, options);\r\n  }\r\n}\r\n", "import { FormatterFunction, TableData } from './types';\r\n\r\n// CSV \u683C\u5F0F\u5316\r\nexport interface CsvOptions {\r\n  delimiter?: string; // \u9ED8\u8BA4\u4E3A ,\r\n  newline?: string;   // \u9ED8\u8BA4\u4E3A \\n\r\n  // \u662F\u5426\u5305\u542B\u8868\u5934\uFF08\u82E5\u5B58\u5728\uFF09\r\n  includeHeader?: boolean;\r\n  // \u6587\u672C\u662F\u5426\u9700\u8981\u5F15\u53F7\u5305\u88F9\r\n  quoteText?: boolean;\r\n}\r\n\r\nfunction escapeCsvValue(val: any, delimiter: string, quoteText: boolean): string {\r\n  if (val === null || val === undefined) return '';\r\n  const str = typeof val === 'string' ? val : String(val);\r\n  const mustQuote = quoteText || str.includes(delimiter) || /[\\r\\n]/.test(str) || str.includes('\"');\r\n  if (!mustQuote) return str;\r\n  return '\"' + str.replace(/\"/g, '\"\"') + '\"';\r\n}\r\n\r\nexport const csvFormatter: FormatterFunction<CsvOptions, string> = (data, options) => {\r\n  const delimiter = options?.delimiter ?? ',';\r\n  const newline = options?.newline ?? '\\n';\r\n  const includeHeader = options?.includeHeader ?? true;\r\n  const quoteText = options?.quoteText ?? false;\r\n\r\n  const lines: string[] = [];\r\n  if (includeHeader && data.header.length) {\r\n    lines.push(data.header.map(v => escapeCsvValue(v, delimiter, quoteText)).join(delimiter));\r\n  }\r\n  for (const row of data.rows) {\r\n    lines.push((row ?? []).map(v => escapeCsvValue(v, delimiter, quoteText)).join(delimiter));\r\n  }\r\n  return lines.join(newline);\r\n};\r\n\r\n// JSON \u683C\u5F0F\u5316\r\nexport interface JsonOptions {\r\n  space?: number;\r\n  // \u8F93\u51FA\u5BF9\u8C61\u5F62\u72B6\uFF1Amatrix | rows | detailed\r\n  shape?: 'matrix' | 'rows' | 'detailed';\r\n}\r\n\r\nexport const jsonFormatter: FormatterFunction<JsonOptions, string> = (data, options) => {\r\n  const space = options?.space ?? 2;\r\n  const shape = options?.shape ?? 'rows';\r\n\r\n  let payload: any;\r\n  switch (shape) {\r\n    case 'matrix':\r\n      payload = data.matrix;\r\n      break;\r\n    case 'detailed':\r\n      payload = data;\r\n      break;\r\n    case 'rows':\r\n    default:\r\n      payload = {\r\n        header: data.header,\r\n        rows: data.rows\r\n      };\r\n      break;\r\n  }\r\n  return JSON.stringify(payload, null, space);\r\n};\r\n\r\n// HTML \u8868\u683C\u683C\u5F0F\u5316\r\nexport interface HtmlOptions {\r\n  tableClass?: string;\r\n  includeHeader?: boolean;\r\n  escapeHtml?: boolean;\r\n}\r\n\r\nfunction escapeHtml(s: any): string {\r\n  if (s === null || s === undefined) return '';\r\n  return String(s)\r\n    .replace(/&/g, '&amp;')\r\n    .replace(/</g, '&lt;')\r\n    .replace(/>/g, '&gt;')\r\n    .replace(/\"/g, '&quot;')\r\n    .replace(/'/g, '&#039;');\r\n}\r\n\r\nexport const htmlFormatter: FormatterFunction<HtmlOptions, string> = (data, options) => {\r\n  const tableClass = options?.tableClass ?? 'table-git';\r\n  const includeHeader = options?.includeHeader ?? true;\r\n  const esc = options?.escapeHtml ?? true;\r\n\r\n  const escVal = (v: any) => (esc ? escapeHtml(v) : (v ?? ''));\r\n\r\n  const parts: string[] = [];\r\n  parts.push(`<table class=\"${tableClass}\">`);\r\n  if (includeHeader && data.header.length) {\r\n    parts.push('<thead><tr>');\r\n    for (const h of data.header) parts.push(`<th>${escVal(h)}</th>`);\r\n    parts.push('</tr></thead>');\r\n  }\r\n  parts.push('<tbody>');\r\n  for (const row of data.rows) {\r\n    parts.push('<tr>');\r\n    for (const cell of (row ?? [])) parts.push(`<td>${escVal(cell)}</td>`);\r\n    parts.push('</tr>');\r\n  }\r\n  parts.push('</tbody></table>');\r\n  return parts.join('');\r\n};\r\n", "// \u6838\u5FC3\u7C7B\u5BFC\u51FA\r\nexport { CellObject } from './core/cell';\r\nexport { TableStructure } from './core/structure';\r\nexport { SheetTree } from './core/sheet';\r\nexport { CommitObject } from './core/commit';\r\nexport { TableGit } from './core/table-git';\r\nexport { DiffMergeEngine } from './core/diff-merge';\r\nexport { ConflictResolver } from './core/conflict-resolver';\r\n\r\n// \u7C7B\u578B\u5BFC\u51FA\r\nexport * from './types';\r\n\r\n// \u5DE5\u5177\u51FD\u6570\u5BFC\u51FA\r\nexport { \r\n  calculateHash,\r\n  generateId,\r\n  deepClone,\r\n  deepEqual,\r\n  parsePosition,\r\n  formatPosition\r\n} from './utils/hash';\r\n\r\n// \u4FBF\u5229\u51FD\u6570\r\nexport { \r\n  createTableGit, \r\n  createCell, \r\n  createColumn, \r\n  createRow,\r\n  createSampleTable\r\n} from './utils/factory';\r\n\r\n// \u683C\u5F0F\u5316\u5668\uFF08\u51FD\u6570\u5F0F\uFF09\u5BFC\u51FA\r\nexport type { TableData, FormatterFunction } from './formatters/types';\r\nexport { TableDataAdapter } from './formatters/adapter';\r\nexport { FunctionFormatter, FormatterRegistry } from './formatters/function-formatter';\r\nexport { csvFormatter, jsonFormatter, htmlFormatter } from './formatters/builtin';\r\n", "import {\r\n\tcreateSampleTable,\r\n\tTableGit,\r\n\tTableDataAdapter,\r\n\tFunctionFormatter,\r\n\tFormatterRegistry,\r\n\tcsvFormatter,\r\n\tjsonFormatter,\r\n\thtmlFormatter,\r\n} from '../dist/index.js';\r\n\r\ntype El = HTMLElement | null;\r\nconst $ = (id: string) => document.getElementById(id);\r\n\r\nlet repo: TableGit | null = null;\r\nconst registry = new FormatterRegistry();\r\nregistry.register(new FunctionFormatter({ name: 'csv', format: csvFormatter }));\r\nregistry.register(new FunctionFormatter({ name: 'json', format: jsonFormatter }));\r\nregistry.register(new FunctionFormatter({ name: 'html', format: htmlFormatter }));\r\n\r\nfunction setText(el: El, text: string) { if (el) el.textContent = text; }\r\nfunction setHTML(el: El, html: string) { if (el) el.innerHTML = html; }\r\nfunction escapeHtml(s: any) {\r\n\tif (s === null || s === undefined) return '';\r\n\treturn String(s)\r\n\t\t.replace(/&/g, '&amp;')\r\n\t\t.replace(/</g, '&lt;')\r\n\t\t.replace(/>/g, '&gt;')\r\n\t\t.replace(/\"/g, '&quot;')\r\n\t\t.replace(/'/g, '&#039;');\r\n}\r\nfunction renderList(elId: string, items: string[]) {\r\n\tconst el = $(elId);\r\n\tif (!el) return;\r\n\tconst html = `<ul class=\"list\">${items.map(i => `<li>${escapeHtml(i)}</li>`).join('')}</ul>`;\r\n\tsetHTML(el, html);\r\n}\r\n\r\nfunction refreshAll() {\r\n\tif (!repo) return;\r\n\t// status\r\n\tconst s = repo.status();\r\n\tsetText($(\"status\"), `\u5206\u652F: ${s.branch}, \u6682\u5B58: ${s.stagedChanges}, \u6700\u540E\u63D0\u4EA4: ${s.lastCommit || '\u65E0'}`);\r\n\r\n\t// columns\r\n\tconst tree = repo.getWorkingTree();\r\n\tif (tree) {\r\n\t\t\tconst cols = tree.structure.getColumnIds().map((id, i) => {\r\n\t\t\tconst c = tree.structure.getColumn(id)!;\r\n\t\t\tconst name = (c as any).name || id; // \u6211\u4EEC\u7684 ColumnMetadata \u6CA1\u6709 name \u5B57\u6BB5\uFF0C\u8FD9\u91CC\u5411\u540E\u517C\u5BB9\r\n\t\t\t\treturn `${name} (${c.dataType}) width=${c.width}`;\r\n\t\t});\r\n\t\t\trenderList('columns', cols);\r\n\t}\r\n\r\n\t// branches\r\n\tconst branches = repo.getBranches();\r\n\tconst current = repo.getCurrentBranch();\r\n\t\trenderList('branches', branches.map(b => `${b === current ? '\u2605 ' : ''}${b}`));\r\n\r\n\t// history\r\n\tconst hist = repo.getCommitHistory(10);\r\n\t\trenderList('history', hist.map((c) => `${c.getShortHash()} - ${c.message}`));\r\n\r\n\t// grid\r\n\trenderGrid();\r\n\t// preview\r\n\trefreshPreview();\r\n}\r\n\r\nfunction renderGrid() {\r\n\tif (!repo) return;\r\n\tconst tree = repo.getWorkingTree();\r\n\tif (!tree) { setHTML($(\"grid\"), '(\u7A7A)'); return; }\r\n\r\n\t// \u7C97\u7565\u6E32\u67D3\u77E9\u9635\uFF08\u5305\u542B\u8868\u5934\uFF09\r\n\tconst adapter = new TableDataAdapter(repo);\r\n\tconst data = adapter.build();\r\n\tconst rows = data.matrix;\r\n\tconst html = [`<table>`]\r\n\tif (data.header.length) {\r\n\t\thtml.push('<thead><tr>');\r\n\t\thtml.push(...data.header.map(h => `<th>${h ?? ''}</th>`));\r\n\t\thtml.push('</tr></thead>');\r\n\t}\r\n\thtml.push('<tbody>');\r\n\tfor (const row of (data.header.length ? data.rows : rows)) {\r\n\t\thtml.push('<tr>');\r\n\t\thtml.push(...(row ?? []).map(cell => `<td>${cell ?? ''}</td>`));\r\n\t\thtml.push('</tr>');\r\n\t}\r\n\thtml.push('</tbody></table>');\r\n\tsetHTML($(\"grid\"), html.join(''));\r\n}\r\n\r\nfunction refreshPreview() {\r\n\tif (!repo) return;\r\n\tconst adapter = new TableDataAdapter(repo);\r\n\tconst data = adapter.build();\r\n\tconst html = registry.format('html', data, { includeHeader: true });\r\n\tconst csv = registry.format('csv', data, { includeHeader: true, quoteText: true });\r\n\tconst json = registry.format('json', data, { shape: 'rows', space: 2 });\r\n\r\n\t// HTML -> iframe\r\n\tconst doc = (document.getElementById('htmlFrame') as HTMLIFrameElement).contentWindow?.document;\r\n\tif (doc) {\r\n\t\tdoc.open();\r\n\t\tdoc.write(`<!doctype html><meta charset='utf-8'><style>table{border-collapse:collapse}th,td{border:1px solid #ddd;padding:6px}</style>${html}`);\r\n\t\tdoc.close();\r\n\t}\r\n\tsetText($(\"csvOut\"), csv);\r\n\tsetText($(\"jsonOut\"), json);\r\n}\r\n\r\nfunction bindTabs() {\r\n\tconst buttons = Array.from(document.querySelectorAll('.tabs button')) as HTMLButtonElement[];\r\n\tconst panels: Record<string, HTMLElement> = {\r\n\t\thtml: document.getElementById('panel-html')!,\r\n\t\tcsv: document.getElementById('panel-csv')!,\r\n\t\tjson: document.getElementById('panel-json')!,\r\n\t};\r\n\tbuttons.forEach(btn => {\r\n\t\tbtn.addEventListener('click', () => {\r\n\t\t\tbuttons.forEach(b => b.classList.remove('active'));\r\n\t\t\tbtn.classList.add('active');\r\n\t\t\tconst tab = btn.getAttribute('data-tab')!;\r\n\t\t\tObject.entries(panels).forEach(([k, el]) => el.style.display = (k === tab ? 'block' : 'none'));\r\n\t\t});\r\n\t});\r\n}\r\n\r\nfunction bindActions() {\r\n\t($(\"btn-init\") as HTMLButtonElement).onclick = () => { repo = createSampleTable(); refreshAll(); };\r\n\t($(\"btn-commit\") as HTMLButtonElement).onclick = () => {\r\n\t\tif (!repo) return;\r\n\t\tconst author = (document.getElementById('author') as HTMLInputElement).value || 'Demo User';\r\n\t\tconst email = (document.getElementById('email') as HTMLInputElement).value || 'demo@example.com';\r\n\t\tconst message = (document.getElementById('message') as HTMLInputElement).value || '\u6F14\u793A\u63D0\u4EA4';\r\n\t\ttry { repo.commit(message, author, email); } catch (e) { console.warn(e); }\r\n\t\trefreshAll();\r\n\t};\r\n\t($(\"btn-create-branch\") as HTMLButtonElement).onclick = () => { if (!repo) return; const b = (document.getElementById('branch') as HTMLInputElement).value || 'temp'; repo.createBranch(b); refreshAll(); };\r\n\t($(\"btn-checkout\") as HTMLButtonElement).onclick = () => { if (!repo) return; const b = (document.getElementById('branch') as HTMLInputElement).value || 'main'; try { repo.checkout(b); } catch(e) { console.warn(e); } refreshAll(); };\r\n\t($(\"btn-back-main\") as HTMLButtonElement).onclick = () => { if (!repo) return; try { repo.checkout('main'); } catch(e) { console.warn(e); } refreshAll(); };\r\n\r\n\t// \u4E1A\u52A1\u64CD\u4F5C\u53C2\u8003 demo.js\r\n\t($(\"btn-adjust\") as HTMLButtonElement).onclick = () => {\r\n\t\tif (!repo) return;\r\n\t\trepo.addCellChange('default', 1, 2, 6999);\r\n\t\trepo.addCellChange('default', 2, 2, 13999);\r\n\t\ttry { repo.commit('\u8C03\u6574\u4EA7\u54C1\u4EF7\u683C', 'Sales Manager', 'sales@company.com'); } catch(e) {}\r\n\t\trefreshAll();\r\n\t};\r\n\r\n\t($(\"btn-delete-row\") as HTMLButtonElement).onclick = () => {\r\n\t\tif (!repo) return;\r\n\t\t// \u6DFB\u52A0\u884C\u5143\u6570\u636E->\u5220\u9664\u7B2C2\u884C\r\n\t\trepo.addRow('default', { id: 'row_2', height: 25, hidden: false, order: 1 });\r\n\t\ttry { repo.commit('\u6DFB\u52A0\u884C\u5143\u6570\u636E', 'Data Manager', 'data@company.com'); } catch(e) {}\r\n\t\trepo.deleteCellChange('default', 2, 1);\r\n\t\trepo.deleteCellChange('default', 2, 2);\r\n\t\trepo.deleteCellChange('default', 2, 3);\r\n\t\trepo.deleteCellChange('default', 2, 4);\r\n\t\trepo.deleteRow('default', 'row_2');\r\n\t\ttry { repo.commit('\u5220\u9664MacBook Pro\u4EA7\u54C1\u884C', 'Product Manager', 'pm@company.com'); } catch(e) {}\r\n\t\trefreshAll();\r\n\t};\r\n\r\n\t($(\"btn-add-more\") as HTMLButtonElement).onclick = () => {\r\n\t\tif (!repo) return;\r\n\t\trepo.addCellChange('default', 4, 1, 'Apple Watch');\r\n\t\trepo.addCellChange('default', 4, 2, 2999);\r\n\t\trepo.addCellChange('default', 4, 3, 200);\r\n\t\trepo.addCellChange('default', 4, 4, '\u667A\u80FD\u624B\u8868');\r\n\t\trepo.addCellChange('default', 5, 1, 'AirPods Pro');\r\n\t\trepo.addCellChange('default', 5, 2, 1999);\r\n\t\trepo.addCellChange('default', 5, 3, 150);\r\n\t\trepo.addCellChange('default', 5, 4, '\u65E0\u7EBF\u8033\u673A');\r\n\t\ttry { repo.commit('\u6DFB\u52A0\u66F4\u591A\u4EA7\u54C1', 'Product Manager', 'pm@company.com'); } catch(e) {}\r\n\t\trefreshAll();\r\n\t};\r\n\r\n\t($(\"btn-sort\") as HTMLButtonElement).onclick = () => { if (!repo) return; repo.sortRows('default', [{ columnId: 'col_2', ascending: true }]); try { repo.commit('\u6309\u4EF7\u683C\u6392\u5E8F\u4EA7\u54C1', 'Data Analyst', 'analyst@company.com'); } catch(e) {} refreshAll(); };\r\n\r\n\t($(\"btn-checkout-prev\") as HTMLButtonElement).onclick = () => {\r\n\t\tif (!repo) return;\r\n\t\tconst history = repo.getCommitHistory(10);\r\n\t\tif (history.length >= 2) {\r\n\t\t\tconst oldCommit = history[history.length - 2];\r\n\t\t\ttry { repo.checkout(oldCommit.hash); } catch(e) {}\r\n\t\t\trefreshAll();\r\n\t\t}\r\n\t};\r\n}\r\n\r\nfunction main() {\r\n\tbindTabs();\r\n\tbindActions();\r\n\t// \u81EA\u52A8\u521D\u59CB\u5316\u4E00\u6B21\r\n\trepo = createSampleTable();\r\n\trefreshAll();\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', main);\r\n\r\n"],
  "mappings": "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",
  "names": ["ObjectType", "ChangeType", "TableGit", "createSampleTable", "repo", "TableDataAdapter", "repo", "FunctionFormatter", "FormatterRegistry", "csvFormatter", "jsonFormatter", "escapeHtml", "htmlFormatter"]
}
